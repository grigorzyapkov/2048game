{"version":3,"sources":["utils/gameUtils.ts","constants/constants.ts","components/Tiles/Tile.tsx","components/Tiles/TilesList.tsx","components/Button/Button.tsx","components/Board/GameResult.tsx","components/Board/Board.tsx","hooks/useLocalStorage.ts","components/ScoreBox/ScoreBox.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","components/GameFooter/GameFooter.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INDICES","areTilesEqual","t1","t2","Object","keys","length","every","p","shiftHorizontally","line","direction","shift","v","positionY","position","shiftVertically","positionX","getColumn","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","i","reverse","value","j","generateBoard","tilesCount","tiles","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","id","getNextId","type","some","x","getRow","row","filter","column","getMaxId","max","apply","map","MOVES_MAP","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","ScreenSizeBreakpoint","TilesScreenTransformFactor","Tile","memo","props","className","style","transform","y","TilesList","factor","TileContainer","useState","calcFactor","setFactor","useEffect","handleResize","window","addEventListener","removeEventListener","sortedTiles","innerWidth","Button","onClick","children","DATA","message","buttonText","containerClass","GameResult","dispatch","useGameContext","isWon","WIN","LOSE","_","getGameStatus","tile","isGameWon","movePossible","arr1","arr2","getCoordinate","isGameOver","Board","status","BoardGrid","grid","Array","from","rowId","columns","colId","BoardContainer","gameState","useReducer","boardReducer","initState","boardState","payload","moves","loading","setTimeout","state","action","lastMove","currGameState","nextGameState","slice","Error","GAME_ID","useStateReducer","prevState","newState","getInitialValue","key","defaultValue","localStorage","getItem","error","console","log","useGameLocalStorage","reducer","setItem","ScoreBox","title","score","ScoresContainer","stateReducer","newPoints","oldAddScore","document","getElementById","innerText","newAddScore","cloneNode","parentNode","replaceChild","bestScore","containsTile","t","find","lastGeneratedTileId","reduce","acc","curr","GameTitle","GameDescription","href","GameHeader","Section","bottomSeparator","GameRules","LearnMore","target","rel","GameFooter","GameContext","React","createContext","gameReducer","move","b1","b2","values","forEach","merge","GameProvider","handleKeyPress","e","preventDefault","includes","Provider","Game","context","useContext","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kXAEMA,EAAU,CAAC,EAAG,EAAG,EAAG,GAMbC,EAAgB,SAACC,EAAUC,GAAuB,IAAD,IAC5D,OACU,OAAPD,GAAsB,OAAPC,IACdD,IAAE,UAAIE,OAAOC,KAAKH,UAAhB,aAAI,EAAiBI,YAAaH,IAAE,UAAIC,OAAOC,KAAKF,UAAhB,aAAI,EAAiBG,UAC3DF,OAAOC,KAAKH,GAAIK,OAAM,SAACC,GAAD,OAAON,EAAGM,KAAOL,EAAGK,OAoF1CC,EAAoB,SAACC,EAAcC,GACvC,OAAOC,EACLF,GACA,SAACG,GAAD,OAAaA,EAAEC,aACf,SAACD,EAASE,GAAV,OAAgCF,EAAEC,UAAYC,IAC9CJ,IAIEK,EAAkB,SAACN,EAAcC,GACrC,OAAOC,EACLF,GACA,SAACG,GAAD,OAAaA,EAAEI,aACf,SAACJ,EAASE,GAAV,OAAgCF,EAAEI,UAAYF,IAC9CJ,IAIEC,EAAQ,SACZF,EACAQ,EACAC,EACAR,GAEA,GAAoB,IAAhBD,EAAKJ,OACP,MAAO,GAET,IAAIc,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUb,IAC/CU,EAAOI,MAAK,SAACC,EAAIC,GAAL,OAAYR,EAAUO,GAAMP,EAAUQ,MAGlD,IADA,IAAMC,EAA8B,SAAdhB,EAAuB,EAAI,EAAIS,EAAOd,OACnDsB,EAAI,EAAGA,EAAIR,EAAOd,OAAQsB,IACjCT,EAAUC,EAAOQ,GAAID,EAAgBC,GAGzB,SAAdjB,GAAwBS,EAAOS,UAE/B,IADA,IAAID,EAAIR,EAAOd,OAAS,EACjBsB,GAAK,GACV,GAAIR,EAAOQ,GAAGE,QAAUV,EAAOQ,EAAI,GAAGE,OAA6B,OAApBV,EAAOQ,GAAGE,MASzDF,QATA,CACE,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAI,EAAGG,IAAK,CAC/B,IAAMnB,EAAsB,UAAdD,EAAwB,GAAK,EAC3CQ,EAAUC,EAAOW,GAAIb,EAAUE,EAAOW,IAAMnB,GAE9CgB,GAAK,EAOT,OAAOR,GAGIY,EAAgB,WAE3B,IAFgE,IAApCC,EAAmC,uDAAd,EAC7CC,EAAQ,GACLD,EAAa,GAClBC,EAAK,sBAAOA,GAAP,CAAcC,EAAiBD,KACpCD,IAGF,OAAOC,GAGIC,EAAmB,SAACD,GAC/B,IAAME,EAAiB,SAACrB,GAGtB,MAAO,CAFGsB,KAAKC,MAAMvB,EAAW,GACtBA,EAAW,IAIvBsB,KAAKC,MAAsB,GAAhBD,KAAKE,UAIhB,IAFA,IAAIxB,EAAWsB,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BC,EAAcJ,EAAerB,GAC1B0B,EAAQ,WAAR,GAASP,GAAT,mBAAmBM,MAExBA,EAAcJ,EADdrB,EAAwB,KAAbA,EAAkB,EAAIA,EAAW,GAI9C,IAAMe,EAAeO,KAAKE,UAAY,GAAM,EAAI,EAEhD,MAAO,CACLG,GAAIC,EAAUT,GACdJ,QACAc,KAAM,MACN3B,UAAWuB,EAAY,GACvB1B,UAAW0B,EAAY,KAIrBC,EAAW,SACfP,EACAjB,EACAH,GAEA,OAAOoB,EAAMW,MACX,SAACC,GAAD,OAAOA,EAAE7B,YAAcA,GAAa6B,EAAEhC,YAAcA,MAI3CiC,EAAS,SAACb,EAAec,GAAhB,OACpBd,EAAMe,QAAO,SAACH,GAAD,OAAOA,EAAE7B,YAAc+B,MAEzB9B,EAAY,SAACgB,EAAegB,GAAhB,OACvBhB,EAAMe,QAAO,SAACH,GAAD,OAAOA,EAAEhC,YAAcoC,MAEzBP,EAAY,SAACT,GACxB,OAAOiB,EAASjB,GAAS,GAIdiB,EAAW,SAACjB,GACvB,OAAOG,KAAKe,IAAIC,MAAMhB,KAAf,CAAsB,GAAtB,mBAA4BH,EAAMoB,KAAI,SAACR,GAAD,OAAOA,EAAEJ,UAG3Ca,EAAY,CACvBC,QAhIoB,SAACtB,GACrB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBZ,EAAgBE,EAAUgB,EAAON,GAAI,WACrC6B,QA8HFC,UA3HsB,SAACxB,GACvB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBZ,EAAgBE,EAAUgB,EAAON,GAAI,YACrC6B,QAyHFE,WA5IuB,SAACzB,GACxB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBnB,EAAkBsC,EAAOb,EAAON,GAAI,YACpC6B,QA0IFG,UAvIsB,SAAC1B,GACvB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OAAOnB,EAAkBsC,EAAOb,EAAON,GAAI,WAAS6B,SC3E5DI,EACP,IADOA,EAER,IAQQC,EACP,GADOA,EAER,GAFQA,EAGR,I,eCKUC,EAZFC,gBAAK,SAACC,GAEjB,OACE,qBACEC,UAAS,oBAAeD,EAAMnC,OAC9BqC,MAAO,CAAEC,UAAU,aAAD,OAAeH,EAAMnB,EAArB,eAA6BmB,EAAMI,EAAnC,QAFpB,SAIE,qBAAKH,UAAS,oBAAeD,EAAMrB,MAAnC,SAA4CqB,EAAMnC,aCZlDwC,G,MAAY,SAACL,GACjB,OACE,8BACGA,EAAM/B,MAAMoB,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAEEhB,MAAOgB,EAAEhB,MACTc,KAAME,EAAEF,KACRE,EAAGA,EAAEhC,UAAYmD,EAAMM,OACvBF,EAAGvB,EAAE7B,UAAYgD,EAAMM,QAJlBzB,EAAEJ,WAWJ8B,EAAgB,SAACP,GAA8B,IAAD,EAE7BQ,mBAA0BC,KAFG,mBAElDH,EAFkD,KAE1CI,EAF0C,KAIzDC,qBAAU,WACR,IAAMC,EAAe,WACnBF,EAAUD,MAKZ,OAFAI,OAAOC,iBAAiB,SAAUF,GAE3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MACjD,IAEH,IAAMI,EAAchB,EAAM/B,MAAMV,MAAK,SAACtB,EAAIC,GAAL,OAAYD,EAAGwC,GAAKvC,EAAGuC,MAC5D,OACE,qBAAKwB,UAAU,gBAAf,SACE,cAAC,EAAD,CAAWhC,MAAO+C,EAAaV,OAAQA,OAKvCG,EAAa,WACjB,OAAII,OAAOI,YAAcrB,EAChBC,EAELgB,OAAOI,YAAcrB,EAChBC,EAGFA,GC3CIqB,G,YAAS,SAAClB,GACrB,OACE,wBAAQvB,GAAIuB,EAAMvB,GAAIwB,UAAU,YAAYkB,QAASnB,EAAMmB,QAA3D,SACGnB,EAAMoB,aCTPC,EAAO,CACX,IAAO,CACLC,QAAS,4BACTC,WAAY,aACZC,eAAgB,iBAElB,KAAQ,CACNF,QAAS,aACTC,WAAY,YACZC,eAAgB,mBAiBLC,EAbI,SAACzB,GAA6B,IACvC0B,EAAaC,KAAbD,SADsC,EAGA1B,EAAM4B,MAAQP,EAAKQ,IAAMR,EAAKS,KAArER,EAHuC,EAGvCA,QAASC,EAH8B,EAG9BA,WAAYC,EAHkB,EAGlBA,eAE5B,OACE,sBAAKvB,UAAS,qBAAgBuB,GAA9B,UACE,4BAAIF,IACJ,cAAC,EAAD,CAAQH,QAAS,SAACY,GAAD,OAAOL,EAAS,CAAE/C,KAAM,aAAzC,SAAwD4C,QCfxDS,EAAgB,SAAC/D,GACrB,ONKuB,SAACA,GACxB,OAAOA,EAAMW,MAAK,SAACqD,GAAD,OAAyB,OAAfA,EAAKpE,SMN7BqE,CAAUjE,GACL,MNQe,SAACA,GACzB,GAAIA,EAAM5B,OAAS,GACjB,OAAO,EAeT,IAZA,IAAM8F,EAAe,SACnBC,EACAC,EACAC,GAEA,OAAOF,EAAKxD,MAAK,SAACC,GAAD,OACfwD,EAAKzD,MACH,SAACwB,GAAD,OAAOkC,EAAczD,KAAOyD,EAAclC,IAAMvB,EAAEhB,QAAUuC,EAAEvC,aAK3DF,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACEwE,EACErD,EAAOb,EAAON,GACdmB,EAAOb,EAAON,EAAI,IAClB,SAACkB,GAAD,OAAaA,EAAEhC,cAEjBsF,EACElF,EAAUgB,EAAON,GACjBV,EAAUgB,EAAON,EAAI,IACrB,SAACkB,GAAD,OAAaA,EAAE7B,aAGjB,OAAO,EAIX,OAAO,EMxCHuF,CAAWtE,GACN,YAGF,eAGHuE,EAAQ,SAACxC,GAEb,IAAMyC,EAAST,EAAchC,EAAM/B,OAEnC,OACE,sBAAKgC,UAAU,iBAAf,UACc,gBAAXwC,GAA4B,cAAC,EAAD,CAAYb,MAAkB,QAAXa,IAChD,cAAC,EAAD,IACA,cAAC,EAAD,CAAOxE,MAAO+B,EAAM/B,YAKpByE,EAAY,WAChB,IAAMC,EAAOC,MAAMC,KAAKD,MAAM,GAAGxG,QAAQiD,KAAI,SAACyD,GAC5C,IAAMC,EAAUH,MAAMC,KAAKD,MAAM,GAAGxG,QAAQiD,KAAI,SAAC2D,GAAD,OAC9C,qBAAiB/C,UAAU,QAAjB+C,MAEZ,OACE,qBAAiB/C,UAAU,MAA3B,SACG8C,GADOD,MAMd,OAAO,qBAAK7C,UAAU,gBAAf,SAAgC0C,KAG5BM,EAAiB,WAAO,IAC3BC,EAAcvB,KAAduB,UAD0B,EAGHC,qBAAWC,EAAcC,KAHtB,mBAG3BC,EAH2B,KAGf5B,EAHe,KAyBlC,OApBAf,qBAAU,WACRe,EAAS,CAAE/C,KAAM,UAAW4E,QAASL,MACpC,CAACA,IAEJvC,qBAAU,WACJ2C,EAAWE,MAAMnH,OAAS,GAAKiH,EAAWG,UAI9C/B,EAAS,CAAE/C,KAAM,cAEjB+E,YAAW,WACThC,EAAS,CACP/C,KAAM,cAEP,QAGF,CAAC2E,IAEG,cAAC,EAAD,CAAOrF,MAAOqF,EAAWrF,SAGlC,SAASmF,EAAaO,EAAmBC,GACvC,OAAQA,EAAOjF,MACb,IAAK,UAEH,OADmBiF,EAAOL,QAAQM,UACM,IAAvBF,EAAM1F,MAAM5B,OACpBgH,EAAUO,EAAOL,SAGnB,2BACFI,GADL,IAEEH,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAmBI,EAAOL,YAGnC,IAAK,YACH,IAAMO,EAAgBH,EAAMH,MAAM,GAC5BO,EAAgBJ,EAAMH,MAAM,GAC5BvF,EAAQqB,EAAUyE,EAAcF,UAAUC,EAAc7F,OAE9D,OAAO,2BAAK0F,GAAZ,IAAmBF,SAAS,EAAMxF,UAEpC,IAAK,UACH,IAAM8F,EAAgBJ,EAAMH,MAAM,GAClC,MAAO,CACLA,MAAOG,EAAMH,MAAMQ,MAAM,GACzBP,SAAS,EACTxF,MAAO8F,EAAc9F,OAGzB,QACE,MAAM,IAAIgG,MAAJ,4BAA+BL,KAK3C,IAAMP,EAAY,SAACH,GACjB,OAAIA,EACK,CAAEM,MAAO,CAACN,GAAYO,SAAS,EAAOxF,MAAOiF,EAAUjF,OAEzD,CAAEuF,MAAO,GAAIC,SAAS,EAAOxF,MAAO,KCjHvCiG,G,MAAU,YAEVC,EAAkB,SAACC,EAAWC,GAClC,MAA2B,oBAAbA,EAA0BA,EAASD,GAAaC,GAG1DC,EAAkB,SAACC,EAAaC,GACpC,IACE,IAAMtB,EAAY9F,KAAKC,MAAMwD,OAAO4D,aAAaC,QAAQR,IACnDrG,EAAK,OAAGqF,QAAH,IAAGA,OAAH,EAAGA,EAAYqB,GAC1B,cAAO1G,QAAP,IAAOA,IAAS2G,EAChB,MAAOG,GAEP,OADAC,QAAQC,IAAIF,GACLH,IAuBIM,MAnBf,SACEP,EACAC,GAEC,IADDO,EACA,uDADUZ,EACV,EAC0BhB,qBACxB4B,EACAT,EAAgBC,EAAKC,IAHvB,mBACO3G,EADP,KACc6D,EADd,KAYA,OANAf,qBAAU,WACR,IAAIgD,EAAQvG,KAAKC,MAAMwD,OAAO4D,aAAaC,QAAQR,KAAa,GAChEP,EAAMY,GAAO1G,EACbgD,OAAO4D,aAAaO,QAAQd,EAAS9G,KAAKE,UAAUqG,MACnD,CAAC9F,EAAO0G,IAEJ,CAAC1G,EAAO6D,IC1BJuD,G,MAAW,SAACjF,GACvB,OAAO,sBAAKC,UAAU,WAAf,UACL,sBAAMA,UAAU,QAAhB,SAAyBD,EAAMkF,QAC/B,sBAAMjF,UAAU,QAAhB,SAAyBD,EAAMmF,aCFtBC,G,MAAkB,WAAO,IAC5BlC,EAAcvB,KAAduB,UAD2B,EAGT4B,EACxB,SACAzB,IACAgC,GANiC,mBAG5B1B,EAH4B,KAGrBjC,EAHqB,KAsBnC,OAbAf,qBAAU,WACRe,EAAS,CAAE/C,KAAM,SAAU4E,QAASL,EAAUjF,UAC7C,CAACiF,EAAUjF,MAAOyD,IAErBf,qBAAU,WACR,GAAIgD,EAAM2B,UAAY,EAAG,CACvB,IAAMC,EAAcC,SAASC,eAAe,iBAC5CF,EAAYG,UAAZ,WAA4B/B,EAAM2B,WAClC,IAAMK,EAAcJ,EAAYK,WAAU,GAC1CL,EAAYM,WAAWC,aAAaH,EAAaJ,MAElD,CAAC5B,IAGF,sBAAK1D,UAAU,kBAAf,UACE,sBAAKC,MAAO,CAAEpD,SAAU,YAAxB,UACE,cAAC,EAAD,CAAUoI,MAAM,QAAQC,MAAOxB,EAAMwB,QACrC,qBAAKlF,UAAU,WAAWxB,GAAG,qBAG/B,cAAC,EAAD,CAAUyG,MAAM,OAAOC,MAAOxB,EAAMoC,iBAKpC1C,EAAY,WAAsC,IAArCpF,EAAoC,uDAApB,GACjC,MAAO,CACLkH,MAAO,EACPG,UAAW,EACXS,UAAW,EACX9H,UAIE+H,EAAe,SAAC/H,EAAegE,GACnC,OAAOhE,EAAMW,MAAK,SAACqH,GAAD,OAAOA,EAAExH,KAAOwD,EAAKxD,OAGnC4G,EAAe,SAAC1B,EAAoBC,GACxC,OAAQA,EAAOjF,MACb,IAAK,SACH,IAAMV,EAAQ2F,EAAOL,QAGrB,GACEI,EAAM1F,MAAM5B,SAAW4B,EAAM5B,QAC7BsH,EAAM1F,MAAM3B,OAAM,SAAC2J,GAAD,OAAOD,EAAa/H,EAAOgI,MAE7C,OAAOtC,EAIT,GACmB,IAAjB1F,EAAM5B,QACN,CAAC,EAAG,GAAGC,OAAM,SAACmC,GAAD,OAAQR,EAAMiI,MAAK,SAACjE,GAAD,OAAUA,EAAKxD,KAAOA,UACrDkF,EAAM1F,MAAM3B,OAAM,SAAC2J,GAAD,OAAOD,EAAa/H,EAAOgI,MAE9C,OAAO,2BAAK5C,EAAUpF,IAAtB,IAA8B8H,UAAWpC,EAAMoC,YAIjD,GACEpC,EAAM1F,MAAM3B,OAAM,SAAC2J,GAAD,OAAOD,EAAa/H,EAAOgI,OAC7ChI,EAAM5B,SAAWsH,EAAM1F,MAAM5B,OAAS,EAEtC,OAAO,2BAAKsH,GAAZ,IAAmB1F,MAAOA,EAAOqH,UAAW,IAI9C,IAAMa,EAAsBjH,EAASjB,GAC/BqH,EAAYrH,EAAMmI,QAAO,SAACC,EAAaC,GAK3C,OAAOD,GAHLC,EAAK7H,KAAO0H,GAAuBH,EAAarC,EAAM1F,MAAOqI,GACzD,EACAA,EAAKzI,SAEV,GAEGsH,EAAQxB,EAAMwB,MAAQG,EACtBS,EAAY3H,KAAKe,IAAIgG,EAAOxB,EAAMoC,WAExC,MAAO,CAAE9H,QAAOqH,YAAWH,QAAOY,aAEpC,QACE,MAAM,IAAI9B,MAAJ,iCAAoCL,EAAOjF,SChGjD4H,G,MAAY,kBAAM,sBAAMtG,UAAU,YAAhB,oBAElBuG,EAAkB,WACtB,OACE,gCACE,4DAA8B,qCAA9B,OACA,uBACA,mBAAGC,KAAK,oBAAR,oCAKOC,EAAa,WAAO,IACvBhF,EAAaC,KAAbD,SAER,OACE,sBAAKzB,UAAU,SAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CACExB,GAAG,iBACH0C,QAAS,SAACY,GAAD,OAAOL,EAAS,CAAE/C,KAAM,aAFnC,6BC3BFgI,GAAU,SAAC3G,GACf,OACE,sBAAKvB,GAAIuB,EAAMvB,GAAf,UACE,6BAAKuB,EAAMkF,QACVlF,EAAMoB,SACNpB,EAAM4G,gBAAkB,uBAAS,SAKlCC,GAAY,SAAC7G,GACjB,OACE,cAAC,GAAD,CACEvB,GAAG,mBACHyG,MAAM,cACN0B,gBAAiB5G,EAAM4G,gBAHzB,SAKE,mKAGE,uCAHF,OAGwB,uCAHxB,0FAIyD,IACvD,yCALF,mBAWAE,GAAY,SAAC9G,GACjB,OACE,cAAC,GAAD,CAASkF,MAAM,aAAa0B,gBAAiB5G,EAAM4G,gBAAnD,SACE,wDAC0B,IACxB,mBAAGH,KAAK,uBAAR,kCAFF,0FAIE,mBACEA,KAAK,4CACLM,OAAO,SACPC,IAAI,aAHN,+BAJF,UAiBOC,GAAa,WACxB,OACE,gCACE,cAAC,GAAD,IACA,uBACA,cAAC,GAAD,QClCAC,GAAcC,IAAMC,cAA4B,MAEhD/D,GAAY,WAAgC,IAA/BrF,EAA8B,uDAAjB,EAC9B,MAAO,CACLC,MAAOF,EAAcC,GACrB6F,SAAU,OAId,SAASwD,GAAY1D,EAAkBC,GACrC,OAAQA,EAAOjF,MACb,IAAK,UACH,OAAO0E,KAET,IAAK,OACH,IACIpF,GAAgBqJ,EADPhI,EAAUsE,EAAOL,UACLI,EAAM1F,OAC/B,OZnCmBsJ,EYmCN5D,EAAM1F,MZnCYuJ,EYmCLvJ,EZlCvBsJ,EAAGjL,OAAM,SAACuC,GAAD,OAAO2I,EAAG5I,MAAK,SAACwB,GAAD,OAAOpE,EAAc6C,EAAGuB,SYmC1CuD,GAGT1F,EZce,SAACA,GACpB,IAAIQ,EAAKC,EAAUT,GACfwJ,EAAkC,GAYtC,OAVAxJ,EAAMyJ,SAAQ,SAAC9K,GACb,IAAM2H,EAAG,UAAM3H,EAAEI,WAAR,OAAoBJ,EAAEC,WAC/B,GAAI4K,EAAOlD,GAAM,CACf,IAAM1G,EAAmB,EAAVjB,EAAEiB,MACjB4J,EAAOlD,GAAP,2BAAmB3H,GAAnB,IAAsB6B,GAAIA,IAAMZ,QAAOc,KAAM,gBAE7C8I,EAAOlD,GAAO3H,KAIXT,OAAOsL,OAAOA,GY5BTE,CAAM1J,GACP,CACLA,MAAM,GAAD,mBAAMA,GAAN,CAAaC,EAAiBD,KACnC4F,SAAUD,EAAOL,UAGrB,QACE,MAAM,IAAIU,MAAJ,4BAA+BL,IZ9CnB,IAAC2D,EAAYC,EYmDrC,IAAMI,GAAe,SAAC5H,GAAW,IAAD,EAEJ8E,EAAoB,OAAQzB,KAAagE,IAFrC,mBAEvB1D,EAFuB,KAEhBjC,EAFgB,KAmB9B,OAfAf,qBAAU,WACR,IAAMkH,EAAiB,SAACC,GACtBA,EAAEC,iBACE,CAAC,UAAW,YAAa,aAAc,aAAaC,SAASF,EAAEvD,MACjE7C,EAAS,CAAE/C,KAAM,OAAQ4E,QAASuE,EAAEvD,OAMxC,OAFAiB,SAAS1E,iBAAiB,UAAW+G,GAE9B,WACLrC,SAASzE,oBAAoB,UAAW8G,MAEzC,CAACnG,IAGF,cAACwF,GAAYe,SAAb,CAAsBpK,MAAO,CAAEqF,UAAWS,EAAOjC,YAAjD,SACG1B,EAAMoB,YAKP8G,GAAO,WACX,OACE,cAAC,GAAD,UACE,sBAAKjI,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEA,cAAC,GAAD,UAMV,SAAS0B,KACP,IAAMwG,EAAUC,qBAAWlB,IAC3B,QAAgBmB,IAAZF,EACF,MAAM,IAAIlE,MAAM,4DAElB,OAAOkE,ECtFMG,OAVf,WACE,OACE,qBAAKrI,UAAU,MAAf,SACE,+BACE,cAAC,GAAD,SCMOsI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF1D,SAASC,eAAe,SAM1B8C,O","file":"static/js/main.63fb6107.chunk.js","sourcesContent":["import { Value, Tile, Direction } from \"../components/Interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n\r\nexport const isGameWon = (tiles: Tile[]) => {\r\n  return tiles.some((tile) => tile.value === 2048);\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n  if (tiles.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): Tile[] => {\r\n  let id = getNextId(tiles);\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = (v.value * 2) as Value;\r\n      values[key] = { ...v, id: id++, value, type: \"merged\" };\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return Object.values(values);\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== 2048) {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while (tilesCount > 0) {\r\n    tiles = [...tiles, createRandomTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n};\r\n\r\nexport const createRandomTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? 4 : 2;\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    type: \"new\",\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nexport const getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n\r\nexport const MOVES_MAP = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n","import { TransformFactor } from \"../components/Interfaces\"\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n}\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: {[key: string]: TransformFactor} = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121\r\n}","import React, { memo } from \"react\";\r\nimport { TileType, Value } from \"../Interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  type: TileType\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Tile = memo((props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Tile;","import React, { useEffect, useState } from \"react\";\r\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\r\nimport { Tile, TransformFactor } from \"../Interfaces\";\r\nimport {default as BoardTile} from \"./Tile\";\r\n\r\nimport \"./TilesList.scss\";\r\n\r\nconst TilesList = (props: { tiles: Tile[], factor: number }) => {\r\n  return (\r\n    <div>\r\n      {props.tiles.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          type={x.type}\r\n          x={x.positionY * props.factor}\r\n          y={x.positionX * props.factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TileContainer = (props: { tiles: Tile[] }) => {\r\n\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const sortedTiles = props.tiles.sort((t1, t2) => t1.id - t2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList tiles={sortedTiles} factor={factor}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.XS) {\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.S) {\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n};","import React from \"react\";\r\n\r\nimport \"./Button.scss\"\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button id={props.id} className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\n\r\nconst DATA = {\r\n  \"WIN\": {\r\n    message: \"Congratulations! You Win!\",\r\n    buttonText: \"Play again\",\r\n    containerClass: \"gameResultWin\"\r\n  },\r\n  \"LOSE\": {\r\n    message: \"Game Over!\",\r\n    buttonText: \"Try again\",\r\n    containerClass: \"gameResultLose\"\r\n  }\r\n}\r\n\r\nconst GameResult = (props: {isWon: boolean}) => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  const {message, buttonText, containerClass} = props.isWon ? DATA.WIN : DATA.LOSE;\r\n\r\n  return (\r\n    <div className={`gameResult ${containerClass}`}>\r\n      <p>{message}</p>\r\n      <Button onClick={(_) => dispatch({ type: \"restart\" })}>{buttonText}</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameResult;","import React, { useEffect, useReducer } from \"react\";\r\nimport { isGameOver, isGameWon, MOVES_MAP } from \"../../utils/gameUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { GameState, Tile } from \"../Interfaces\";\r\nimport Tiles from \"../Tiles\";\r\n\r\nimport \"./Board.scss\";\r\nimport GameResult from \"./GameResult\";\r\nimport { BoardActionType, BoardState, GameStatus } from \"./Interfaces\";\r\n\r\nconst getGameStatus = (tiles: Tile[]): GameStatus => {\r\n  if (isGameWon(tiles)) {\r\n    return \"WIN\";\r\n  }\r\n  if (isGameOver(tiles)) {\r\n    return \"GAME_OVER\";\r\n  }\r\n\r\n  return \"IN_PROGRESS\";\r\n};\r\n\r\nconst Board = (props: { tiles: Tile[] }) => {\r\n  \r\n  const status = getGameStatus(props.tiles);\r\n\r\n  return (\r\n    <div className=\"boardContainer\">\r\n      {status !== \"IN_PROGRESS\" && <GameResult isWon={status === \"WIN\"} />}\r\n      <BoardGrid />\r\n      <Tiles tiles={props.tiles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nexport const BoardContainer = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [boardState, dispatch] = useReducer(boardReducer, initState());\r\n  \r\n  useEffect(() => {\r\n    dispatch({ type: \"addMove\", payload: gameState });\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (boardState.moves.length < 2 || boardState.loading) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: \"startMove\" });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"endMove\",\r\n      });\r\n    }, 100);\r\n\r\n    // TODO: Should clear timeouts\r\n  }, [boardState]);\r\n\r\n  return <Board tiles={boardState.tiles} />;\r\n};\r\n\r\nfunction boardReducer(state: BoardState, action: BoardActionType): BoardState {\r\n  switch (action.type) {\r\n    case \"addMove\": {\r\n      const isNewGame = !action.payload.lastMove;\r\n      if (isNewGame || state.tiles.length === 0) {\r\n        return initState(action.payload);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        moves: [...state.moves, action.payload],\r\n      };\r\n    }\r\n    case \"startMove\": {\r\n      const currGameState = state.moves[0];\r\n      const nextGameState = state.moves[1];\r\n      const tiles = MOVES_MAP[nextGameState.lastMove](currGameState.tiles);\r\n\r\n      return { ...state, loading: true, tiles };\r\n    }\r\n    case \"endMove\": {\r\n      const nextGameState = state.moves[1];\r\n      return {\r\n        moves: state.moves.slice(1),\r\n        loading: false,\r\n        tiles: nextGameState.tiles,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst initState = (gameState?: GameState): BoardState => {\r\n  if (gameState) {\r\n    return { moves: [gameState], loading: false, tiles: gameState.tiles };\r\n  }\r\n  return { moves: [], loading: false, tiles: [] };\r\n};\r\n","import { useEffect, useReducer } from \"react\";\r\n\r\nconst GAME_ID = \"2048game\";\r\n\r\nconst useStateReducer = (prevState, newState) => {\r\n  return typeof newState === \"function\" ? newState(prevState) : newState;\r\n};\r\n\r\nconst getInitialValue = (key: string, defaultValue: any) => {\r\n  try {\r\n    const gameState = JSON.parse(window.localStorage.getItem(GAME_ID));\r\n    const value = gameState?.[key];\r\n    return value ?? defaultValue;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\nfunction useGameLocalStorage<T>(\r\n  key: string,\r\n  defaultValue: T,\r\n  reducer = useStateReducer\r\n) {\r\n  const [value, dispatch] = useReducer(\r\n    reducer,\r\n    getInitialValue(key, defaultValue)\r\n  );\r\n\r\n  useEffect(() => {\r\n    let state = JSON.parse(window.localStorage.getItem(GAME_ID)) || {};\r\n    state[key] = value;\r\n    window.localStorage.setItem(GAME_ID, JSON.stringify(state));\r\n  }, [value, key]);\r\n\r\n  return [value, dispatch];\r\n}\r\n\r\nexport default useGameLocalStorage;\r\n","import React from \"react\";\r\n\r\nimport \"./ScoreBox.scss\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\nexport const ScoreBox = (props: ScoreBoxProps) => {\r\n  return <div className=\"scoreBox\">\r\n    <span className=\"title\">{props.title}</span>\r\n    <span className=\"score\">{props.score}</span>\r\n  </div>\r\n}\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { getMaxId } from \"../../utils/gameUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { Tile } from \"../Interfaces\";\r\nimport ScoreBox from \"../ScoreBox\";\r\nimport { ACTIONTYPE, ScoresState } from \"./Interfaces\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\nexport const ScoresContainer = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [state, dispatch] = useGameLocalStorage(\r\n    \"scores\",\r\n    initState(),\r\n    stateReducer\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"change\", payload: gameState.tiles });\r\n  }, [gameState.tiles, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (state.newPoints > 0) {\r\n      const oldAddScore = document.getElementById(\"additionScore\");\r\n      oldAddScore.innerText = `+${state.newPoints}`;\r\n      const newAddScore = oldAddScore.cloneNode(true);\r\n      oldAddScore.parentNode.replaceChild(newAddScore, oldAddScore);\r\n    }\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={state.score} />\r\n        <div className=\"addScore\" id=\"additionScore\"></div>\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={state.bestScore} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initState = (tiles: Tile[] = []): ScoresState => {\r\n  return {\r\n    score: 0,\r\n    newPoints: 0,\r\n    bestScore: 0,\r\n    tiles,\r\n  };\r\n};\r\n\r\nconst containsTile = (tiles: Tile[], tile: Tile): boolean => {\r\n  return tiles.some((t) => t.id === tile.id);\r\n};\r\n\r\nconst stateReducer = (state: ScoresState, action: ACTIONTYPE) => {\r\n  switch (action.type) {\r\n    case \"change\": {\r\n      const tiles = action.payload;\r\n\r\n      // handles page refresh\r\n      if (\r\n        state.tiles.length === tiles.length &&\r\n        state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      // handles restart\r\n      if (\r\n        tiles.length === 2 &&\r\n        [1, 2].every((id) => tiles.find((tile) => tile.id === id)) &&\r\n        !state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return { ...initState(tiles), bestScore: state.bestScore };\r\n      }\r\n\r\n      // handles add new tile\r\n      if (\r\n        state.tiles.every((t) => containsTile(tiles, t)) &&\r\n        tiles.length === state.tiles.length + 1\r\n      ) {\r\n        return { ...state, tiles: tiles, newPoints: 0 };\r\n      }\r\n\r\n      // handles merge\r\n      const lastGeneratedTileId = getMaxId(tiles);\r\n      const newPoints = tiles.reduce((acc: number, curr: Tile) => {\r\n        const add =\r\n          curr.id === lastGeneratedTileId || containsTile(state.tiles, curr)\r\n            ? 0\r\n            : curr.value;\r\n        return acc + add;\r\n      }, 0);\r\n\r\n      const score = state.score + newPoints;\r\n      const bestScore = Math.max(score, state.bestScore);\r\n\r\n      return { tiles, newPoints, score, bestScore };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst GameDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the numbers to get <b>2048</b>!</span>\r\n      <br />\r\n      <a href=\"#howToPlaySection\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"gameIntro\">\r\n        <GameTitle />\r\n        <GameDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button\r\n          id=\"restartGameBtn\"\r\n          onClick={(_) => dispatch({ type: \"restart\" })}\r\n        >\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { SectionProps } from \"./Interfaces\";\r\n\r\nconst Section = (props: SectionProps) => {\r\n  return (\r\n    <div id={props.id}>\r\n      <h4>{props.title}</h4>\r\n      {props.children}\r\n      {props.bottomSeparator ? <hr /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameRules = (props: { bottomSeparator?: boolean }) => {\r\n  return (\r\n    <Section\r\n      id=\"howToPlaySection\"\r\n      title=\"HOW TO PLAY\"\r\n      bottomSeparator={props.bottomSeparator}\r\n    >\r\n      <p>\r\n        Use your arrow keys to move the numbers. The same numbers will be merged\r\n        into one when they touch. After each move, a new number (\r\n        <strong>2</strong> or <strong>4</strong>) is generated at a random empty\r\n        position. Merge the numbers and build a 2048 number to{\" \"}\r\n        <strong>WIN</strong> the game!\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nconst LearnMore = (props: { bottomSeparator?: boolean }) => {\r\n  return (\r\n    <Section title=\"LEARN MORE\" bottomSeparator={props.bottomSeparator}>\r\n      <p>\r\n        This app is inspired by{\" \"}\r\n        <a href=\"https://play2048.co/\">https://play2048.co/</a>. If you want to\r\n        learn more about the project tech stack or see the code, visit the&nbsp;\r\n        <a\r\n          href=\"https://github.com/grigorzyapkov/2048game\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          Github repository\r\n        </a>\r\n        .\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport const GameFooter = () => {\r\n  return (\r\n    <div>\r\n      <GameRules />\r\n      <hr />\r\n      <LearnMore />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  createRandomTile,\r\n  generateBoard,\r\n  merge,\r\n  MOVES_MAP,\r\n} from \"../../utils/gameUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport {\r\n  GameContextActionType,\r\n  GameState,\r\n  IGameContext,\r\n  MoveKeyCode,\r\n  Tile,\r\n} from \"../Interfaces\";\r\nimport GameFooter from \"../GameFooter\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nconst GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst initState = (tilesCount = 2): GameState => {\r\n  return {\r\n    tiles: generateBoard(tilesCount),\r\n    lastMove: null,\r\n  };\r\n};\r\n\r\nfunction gameReducer(state: GameState, action: GameContextActionType) {\r\n  switch (action.type) {\r\n    case \"restart\": {\r\n      return initState();\r\n    }\r\n    case \"move\": {\r\n      const move = MOVES_MAP[action.payload];\r\n      let tiles: Tile[] = move(state.tiles);\r\n      if (areEqual(state.tiles, tiles)) {\r\n        return state;\r\n      }\r\n\r\n      tiles = merge(tiles);\r\n      return {\r\n        tiles: [...tiles, createRandomTile(tiles)],\r\n        lastMove: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst GameProvider = (props) => {\r\n\r\n  const [state, dispatch] = useGameLocalStorage(\"game\", initState(), gameReducer);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowRight\", \"ArrowLeft\"].includes(e.key)) {\r\n        dispatch({ type: \"move\", payload: e.key as MoveKeyCode });\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState: state, dispatch }}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst Game = () => {\r\n  return (\r\n    <GameProvider>\r\n      <div className=\"container\">\r\n        <div className=\"gameContainer\">\r\n          <GameHeader />\r\n          <Board />\r\n        </div>\r\n          <GameFooter />\r\n      </div>\r\n    </GameProvider>\r\n  );\r\n};\r\n\r\nfunction useGameContext() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useGameContext must be used within a GameContextProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { Game, useGameContext };\r\n","import React from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}