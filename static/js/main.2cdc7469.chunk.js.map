{"version":3,"sources":["components/GameContainer/GameContainer.tsx","components/ScoresContainer/ScoresContainer.tsx","utils/gameUtils.ts","components/Button/Button.tsx","components/Tile/Tile.tsx","components/Board/Board.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameContainer","props","className","children","ScoreBox","useEffect","showAddition","title","score","ScoresContainer","useContext","GameContext","addScore","div","document","createElement","id","classList","add","innerText","currentScoreBox","getElementById","childElementCount","replaceChild","lastChild","appendChild","style","position","isGameOver","board","merge","merged","flat","includes","i","length","j","value","boardState","getNextId","values","filter","v","forEach","key","positionX","positionY","parseInt","toString","Object","moveRight","map","line","shiftRight","moveLeft","shiftLeft","moveUp","result","columnIdx","column","arrayColumn","moveDown","reverse","x","Math","abs","pos","arr","n","getMaxId","max","apply","Button","onClick","Tile","translateX","translateY","y","transform","BoardContainer","GameOverLayer","handleRestart","BoardGrid","grid","Array","from","keys","rowId","columns","colId","TilesList","TileContainer","reduce","prev","curr","sort","a","b","Board","GameTitle","ShortDescription","href","GameHeader","_","React","createContext","MOVES","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","Game","useState","boardInitialState","setBoardState","setScore","setAddScore","handleKeyPress","e","preventDefault","move","newBoardState","JSON","stringify","console","log","setTimeout","mergedBoard","moveScore","addRandomNumber","addEventListener","removeEventListener","Provider","boardEmptyState","number","random","parse","emptyPositions","floor","currentEmptyPosition","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2cdc7469.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./GameContainer.css\";\r\n\r\ninterface GameContainerProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const GameContainer = (props: GameContainerProps) => {\r\n  return <div className=\"container\">{props.children}</div>\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { GameContext } from \"../Game/Game\";\r\n\r\nimport \"./ScoresContainer.css\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n  showAddition?: boolean;\r\n}\r\n\r\nconst ScoreBox = (props: ScoreBoxProps) => {\r\n  useEffect(() => {}, [props.showAddition]);\r\n\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ScoresContainer = () => {\r\n  const { score, addScore } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (addScore === 0) {\r\n      return;\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"additionScore\";\r\n    div.classList.add(\"addScore\");\r\n    div.innerText = `+${addScore}`;\r\n\r\n    const currentScoreBox = document.getElementById(\"currentScoreBox\");\r\n    if (currentScoreBox.childElementCount === 2) {\r\n      currentScoreBox.replaceChild(div, currentScoreBox.lastChild);\r\n    }else {\r\n      currentScoreBox.appendChild(div);\r\n    }\r\n  }, [score, addScore]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div id=\"currentScoreBox\" style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={score} />\r\n        {/* <div id=\"additionScore\" className=\"addScore\">{`+${addScore}`}</div> */}\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={score} />\r\n    </div>\r\n  );\r\n};\r\n","import { BoardStateType, BoardValue } from \"../components/Game/Interfaces\";\r\nimport { Direction, Value } from \"../components/interfaces/interfaces\";\r\n\r\nexport const areEqual = (prev: BoardStateType, curr: BoardStateType) => {\r\n  return JSON.stringify(prev) === JSON.stringify(curr);\r\n};\r\n\r\nexport const isGameOver = (board: BoardStateType) => {\r\n  const [merged] = merge(board);\r\n\r\n  if (merged.flat().includes(null)) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < merged.length; i++) {\r\n    for (let j = 0; j < merged.length - 1; j++) {\r\n      if (\r\n        merged[i][j].value === merged[i][j + 1].value ||\r\n        merged[j][i].value === merged[j + 1][i].value\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const sift = (boardState: BoardStateType, direction: Direction) => {\r\n  const MOVES = {\r\n    up: moveUp,\r\n    down: moveDown,\r\n    right: moveRight,\r\n    left: moveLeft,\r\n  };\r\n\r\n  return MOVES[direction](boardState);\r\n};\r\n\r\nexport const merge = (boardState: BoardStateType): [BoardStateType, number] => {\r\n  let id = getNextId(boardState);\r\n  let score = 0;\r\n  let values: { [key: string]: BoardValue } = {};\r\n\r\n  boardState\r\n    .flat()\r\n    .filter((v) => v !== null)\r\n    .forEach((v) => {\r\n      const key = `${v.positionX}${v.positionY}`;\r\n      if (values[key]) {\r\n        const value = parseInt(v.value) * 2;\r\n        values[key] = { ...v, id: id++, value: value.toString() as Value };\r\n        score += value;\r\n      } else {\r\n        values[key] = v;\r\n      }\r\n    });\r\n\r\n  const merged = [\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n  ];\r\n  Object.values(values).forEach((v) => (merged[v.positionX][v.positionY] = v));\r\n\r\n  return [merged, score];\r\n};\r\n\r\nexport const moveRight = (boardState: BoardStateType): BoardStateType => {\r\n  return boardState.map((line) => shiftRight(line));\r\n};\r\n\r\nexport const moveLeft = (boardState: BoardStateType): BoardStateType => {\r\n  return boardState.map((line) => shiftLeft(line));\r\n};\r\n\r\nexport const moveUp = (boardState: BoardStateType): BoardStateType => {\r\n  let result: BoardStateType = [[], [], [], []];\r\n  for (let columnIdx = 0; columnIdx < 4; columnIdx++) {\r\n    const column = shiftLeft(arrayColumn(boardState, columnIdx));\r\n    for (let i = 0; i < 4; i++) {\r\n      result[i][columnIdx] = column[i] && {\r\n        ...column[i],\r\n        positionX: column[i].positionY,\r\n        positionY: columnIdx,\r\n      };\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const moveDown = (boardState: BoardStateType): BoardStateType => {\r\n  let result: BoardStateType = [[], [], [], []];\r\n\r\n  for (let columnIdx = 0; columnIdx < 4; columnIdx++) {\r\n    const column = shiftRight(arrayColumn(boardState, columnIdx));\r\n    for (let i = 0; i < 4; i++) {\r\n      result[i][columnIdx] = column[i] && {\r\n        ...column[i],\r\n        positionX: column[i].positionY,\r\n        positionY: columnIdx,\r\n      };\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst shiftLeft = (line: Array<BoardValue>): Array<BoardValue> => {\r\n  return shiftRight([...line].reverse())\r\n    .reverse()\r\n    .map((x) => x && { ...x, positionY: Math.abs(3 - x.positionY) });\r\n};\r\n\r\nconst shiftRight = (line: Array<BoardValue>): Array<BoardValue> => {\r\n  let result: Array<BoardValue> = [];\r\n  let pos = 3;\r\n  for (let i = 3; i >= 0; i--) {\r\n    if (line[i] !== null) {\r\n      result[pos] = { ...line[i], positionY: pos };\r\n      pos--;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i <= pos; i++) {\r\n    result[i] = null;\r\n  }\r\n\r\n  let i = 3;\r\n  while (i >= 1) {\r\n    if (\r\n      result[i] !== null &&\r\n      result[i].value === result[i - 1]?.value &&\r\n      result[i].value !== \"2048\"\r\n    ) {\r\n      for (let j = i - 1; j >= 0; j--) {\r\n        if (!result[j]) {\r\n          break;\r\n        }\r\n        result[j].positionY += 1;\r\n      }\r\n      i -= 2;\r\n      break;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst arrayColumn = (arr: BoardStateType, n: number): Array<BoardValue> =>\r\n  arr.map((x) => x[n]);\r\n\r\nexport const getNextId = (boardState: BoardStateType): number => {\r\n  return getMaxId(boardState) + 1;\r\n};\r\n\r\nconst getMaxId = (boardState: BoardStateType): number => {\r\n  return Math.max.apply(\r\n    Math,\r\n    boardState\r\n      .flat()\r\n      .filter((x) => x !== null)\r\n      .map((x) => x.id)\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.css\"\r\n\r\ninterface ButtonProps {\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Value } from \"../interfaces/interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const Tile = (props: TileProps) => {\r\n  const translateX = 121 * props.x;\r\n  const translateY = 121 * props.y;\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${translateX}px, ${translateY}px)` }}\r\n    >\r\n      <div className=\"tileInner\">{props.value}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { isGameOver } from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { BoardValue } from \"../Game/Interfaces\";\r\nimport Tile from \"../Tile\";\r\n\r\nimport \"./Board.scss\";\r\n\r\nconst BoardContainer = (props: { children: React.ReactNode }) => {\r\n  return <div className=\"boardContainer\">{props.children}</div>;\r\n};\r\n\r\nconst GameOverLayer = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={handleRestart}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst TilesList = (props: { values: BoardValue[] }) => {\r\n  return (\r\n    <>\r\n      {props.values.map((x) => (\r\n        <Tile key={x.id} value={x.value} x={x.positionY} y={x.positionX} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst TileContainer = () => {\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  const values = boardState\r\n    .reduce((prev, curr) => {\r\n      return [...prev, ...curr.filter((x) => x !== null)];\r\n    }, [])\r\n    .sort((a, b) => a.id - b.id);\r\n\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList values={values} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Board = () => {\r\n\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  return (\r\n    <BoardContainer>\r\n      {isGameOver(boardState) && <GameOverLayer />}\r\n      <BoardGrid />\r\n      <TileContainer />\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport GameContainer from \"../GameContainer\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.css\";\r\nimport { BoardStateType, IGameContext } from \"./Interfaces\";\r\nimport {\r\n  areEqual,\r\n  getNextId,\r\n  merge,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n} from \"../../utils/gameUtils\";\r\nimport { Value } from \"../interfaces/interfaces\";\r\nimport Button from \"../Button\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst ShortDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameHeader = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"flex\">\r\n        <GameTitle />\r\n        <ScoresContainer />\r\n      </div>\r\n      <div className=\"flexWithSpaceBetween\">\r\n        <ShortDescription />\r\n        <Button onClick={(_) => handleRestart()}>New Game</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst MOVES = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n\r\nexport const Game = () => {\r\n  // TODO: test to see if ... spread needed\r\n  const [boardState, setBoardState] = useState<BoardStateType>([\r\n    ...boardInitialState,\r\n  ]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [addScore, setAddScore] = useState<number>(0);\r\n\r\n  const handleGenerate = () => {\r\n    setBoardState(addRandomNumber(boardState));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const move = MOVES[e.key];\r\n      if (!move) {\r\n        return;\r\n      }\r\n\r\n      const newBoardState: BoardStateType = move(boardState);\r\n      if (areEqual(boardState, newBoardState)) {\r\n        return;\r\n      }\r\n      \r\n      console.log(\"after move\", newBoardState);\r\n      setBoardState(newBoardState);\r\n\r\n      setTimeout(() => {\r\n        const [mergedBoard, moveScore] = merge(newBoardState);\r\n        console.log(\"after merge\", mergedBoard);\r\n        setBoardState(mergedBoard);\r\n        setScore(score + moveScore);\r\n        setAddScore(moveScore);\r\n\r\n        setTimeout(() => {\r\n          const board = addRandomNumber(mergedBoard);\r\n          console.log(\"after random number\", board);\r\n          setBoardState(board);\r\n        }, 100);\r\n      }, 0);\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [boardState, score]);\r\n\r\n  const handleRestart = () => {\r\n    setBoardState(boardEmptyState);\r\n    setTimeout(() => {\r\n      setBoardState([...boardInitialState]);\r\n    }, 100);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        boardState,\r\n        score,\r\n        addScore,\r\n        handleRestart,\r\n      }}\r\n    >\r\n      <GameContainer>\r\n        <GameHeader />\r\n        <Button onClick={handleGenerate}>Generate Tile</Button>\r\n        <Board />\r\n      </GameContainer>\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst boardInitialState: BoardStateType = [\r\n  [null, null, null, null],\r\n  [null, null, { id: 1, value: \"2\", positionX: 1, positionY: 2 }, null],\r\n  [null, { id: 2, value: \"2\", positionX: 2, positionY: 1 }, null, null],\r\n  [null, null, null, null],\r\n];\r\n\r\nconst boardEmptyState: BoardStateType = [\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n];\r\n\r\nconst addRandomNumber = (boardState: BoardStateType): BoardStateType => {\r\n  const number: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n  const result = JSON.parse(JSON.stringify(boardState));\r\n\r\n  const id = getNextId(result);\r\n\r\n  const emptyPositions = result.reduce((prev, curr) => {\r\n    return prev + curr.filter((x) => x === null).length;\r\n  }, 0);\r\n  const position = Math.floor(Math.random() * emptyPositions) + 1;\r\n  let currentEmptyPosition = 0;\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    for (let j = 0; j < result[i].length; j++) {\r\n      if (result[i][j] === null) {\r\n        currentEmptyPosition++;\r\n      }\r\n\r\n      if (currentEmptyPosition === position) {\r\n        result[i][j] = { id: id, value: number, positionX: i, positionY: j };\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header></header>\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}