{"version":3,"sources":["components/GameContainer/GameContainer.tsx","constants/constants.ts","utils/gameUtils.ts","components/Button/Button.tsx","components/BoardTile/BoardTile.tsx","components/Board/Board.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameContainer","props","className","children","ScreenSizeBreakpoint","TilesScreenTransformFactor","INDICES","areTilesEqual","t1","t2","Object","keys","length","every","p","isGameOver","tiles","movePossible","arr1","arr2","getCoordinate","some","x","y","value","i","getRow","positionY","getColumn","positionX","merge","id","getNextId","values","forEach","v","key","parseInt","toString","type","shiftHorizontally","line","direction","shift","position","shiftVertically","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","reverse","j","generateBoard","tilesCount","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","row","filter","column","getMaxId","max","apply","map","Button","onClick","BoardTile","memo","style","transform","BoardContainer","GameOverContainer","handleRestart","useContext","GameContext","restartGame","BoardGrid","grid","Array","from","rowId","columns","colId","calcFactor","window","innerWidth","TilesList","useState","factor","setFactor","useEffect","handleResize","addEventListener","removeEventListener","TileContainer","sortedTiles","Board","ScoreBox","title","score","ScoresContainer","useReducer","stateReducer","initState","state","dispatch","payload","newPoints","oldAddScore","document","getElementById","innerText","newAddScore","cloneNode","parentNode","replaceChild","containsTile","tile","t","action","find","lastGeneratedTileId","reduce","acc","curr","Error","GameTitle","ShortDescription","href","GameHeader","_","React","createContext","Game","useGameState","registerMove","handleKeyPress","e","preventDefault","includes","Provider","MOVES","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","moves","setMoves","loading","setLoading","setTiles","move","slice","b2","nextTiles","setTimeout","merged","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91bc4f46.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./GameContainer.scss\";\r\n\r\ninterface GameContainerProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const GameContainer = (props: GameContainerProps) => {\r\n  return <div className=\"container\">{props.children}</div>\r\n}","import { TransformFactor } from \"../components/Interfaces\"\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n}\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: {[key: string]: TransformFactor} = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121\r\n}","import { Value, Tile, Direction } from \"../components/Interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n  if (tiles.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): Tile[] => {\r\n  let id = getNextId(tiles);\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = parseInt(v.value) * 2;\r\n      values[key] = { ...v, id: id++, value: value.toString() as Value, type: \"merged\" };\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return Object.values(values);\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== \"2048\") {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while(tilesCount > 0){\r\n    tiles = [...tiles, createRandomTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n}\r\n\r\nexport const createRandomTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    type: \"new\",\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nexport const getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.scss\"\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button id={props.id} className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { TileType, Value } from \"../Interfaces\";\r\n\r\nimport \"./BoardTile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  type: TileType\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const BoardTile = memo((props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\r\nimport { isGameOver, merge } from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { Tile, TransformFactor } from \"../Interfaces\";\r\nimport BoardTile from \"../BoardTile\";\r\n\r\nimport \"./Board.scss\";\r\n\r\nconst BoardContainer = (props: { children: React.ReactNode }) => {\r\n  return <div className=\"boardContainer\">{props.children}</div>;\r\n};\r\n\r\nconst GameOverContainer = () => {\r\n  const { restartGame: handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={handleRestart}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if(window.innerWidth <= ScreenSizeBreakpoint.XS){\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if(window.innerWidth <= ScreenSizeBreakpoint.S){\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n}\r\n\r\nconst TilesList = (props: { tiles: Tile[] }) => {\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {props.tiles.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          type={x.type}\r\n          x={x.positionY * factor}\r\n          y={x.positionX * factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TileContainer = () => {\r\n  const { tiles } = useContext(GameContext);\r\n\r\n  const sortedTiles = tiles.sort((t1, t2) => t1.id - t2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList tiles={sortedTiles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Board = () => {\r\n  const { tiles } = useContext(GameContext);\r\n\r\n  return (\r\n    <BoardContainer>\r\n      {isGameOver(merge(tiles)) && <GameOverContainer />}\r\n      <BoardGrid />\r\n      <TileContainer />\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useReducer } from \"react\";\r\nimport { getMaxId } from \"../../utils/gameUtils\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { Tile } from \"../Interfaces\";\r\nimport { ACTIONTYPE, ScoreBoxProps, ScoresState } from \"./Interfaces\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\nconst ScoreBox = (props: ScoreBoxProps) => {\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ScoresContainer = () => {\r\n  const { tiles } = useContext(GameContext);\r\n  const [state, dispatch] = useReducer(stateReducer, initState(tiles));\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"change\", payload: tiles });\r\n  }, [tiles]);\r\n\r\n  useEffect(() => {\r\n    if (state.newPoints > 0) {\r\n      const oldAddScore = document.getElementById(\"additionScore\");\r\n      oldAddScore.innerText = `+${state.newPoints}`;\r\n      const newAddScore = oldAddScore.cloneNode(true);\r\n      oldAddScore.parentNode.replaceChild(newAddScore, oldAddScore);\r\n    }\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={state.score} />\r\n        <div className=\"addScore\" id=\"additionScore\"></div>\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={state.score} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initState = (tiles: Tile[]): ScoresState => {\r\n  return {\r\n    score: 0,\r\n    newPoints: 0,\r\n    tiles,\r\n  };\r\n};\r\n\r\nconst containsTile = (tiles: Tile[], tile: Tile): boolean => {\r\n  return tiles.some((t) => t.id === tile.id);\r\n};\r\n\r\nconst stateReducer = (state: ScoresState, action: ACTIONTYPE) => {\r\n  switch (action.type) {\r\n    case \"change\": {\r\n      const tiles = action.payload;\r\n\r\n      // handles restart\r\n      if (\r\n        tiles.length === 2 &&\r\n        [1, 2].every((id) => tiles.find((tile) => tile.id === id)) &&\r\n        !state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return initState(tiles);\r\n      }\r\n\r\n      // handles add new tile\r\n      if (\r\n        state.tiles.every((t) => containsTile(tiles, t)) &&\r\n        tiles.length === state.tiles.length + 1\r\n      ) {\r\n        return { ...state, tiles: tiles, newPoints: 0 };\r\n      }\r\n\r\n      // handles merge\r\n      const lastGeneratedTileId = getMaxId(tiles);\r\n      const newPoints = tiles.reduce((acc: number, curr: Tile) => {\r\n        const add =\r\n          curr.id === lastGeneratedTileId || containsTile(state.tiles, curr)\r\n            ? 0\r\n            : parseInt(curr.value);\r\n        return acc + add;\r\n      }, 0);\r\n\r\n      return {\r\n        tiles: tiles,\r\n        newPoints,\r\n        score: state.score + newPoints,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst ShortDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { restartGame: handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"centeredText\">\r\n        <GameTitle />\r\n        <ShortDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button id=\"restartGameBtn\" onClick={(_) => handleRestart()}>\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport GameContainer from \"../GameContainer\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  createRandomTile,\r\n  generateBoard,\r\n  merge,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n} from \"../../utils/gameUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport { IGameContext, MoveKeyCode, Tile } from \"../Interfaces\";\r\n\r\nexport const GameContext = React.createContext<IGameContext>(null);\r\n\r\nexport const Game = () => {\r\n  const { tiles, registerMove, restartGame } = useGameState();\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowRight\", \"ArrowLeft\"].includes(e.key)) {\r\n        registerMove(e.key as MoveKeyCode);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [registerMove]);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        tiles,\r\n        restartGame,\r\n      }}\r\n    >\r\n      <GameContainer>\r\n        <GameHeader />\r\n        <Board />\r\n      </GameContainer>\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst MOVES = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n\r\nconst useGameState = (): {\r\n  tiles: Tile[];\r\n  registerMove: (move: MoveKeyCode) => void;\r\n  restartGame: () => void;\r\n} => {\r\n  const [moves, setMoves] = useState<MoveKeyCode[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [tiles, setTiles] = useState<Tile[]>(generateBoard());\r\n\r\n  useEffect(() => {\r\n    if (moves.length === 0 || loading) {\r\n      return;\r\n    }\r\n\r\n    const move = MOVES[moves[0]];\r\n    setMoves(moves.slice(1));\r\n    setLoading(true);\r\n\r\n    const nextTiles: Tile[] = move(tiles);\r\n    if (areEqual(tiles, nextTiles)) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    setTiles(nextTiles);\r\n    setTimeout(() => {\r\n      const merged = merge(nextTiles);\r\n      setTiles([...merged, createRandomTile(merged)]);\r\n      setLoading(false);\r\n    }, 100);\r\n\r\n    // TODO: Should clear timeouts\r\n  }, [moves, loading, tiles]);\r\n\r\n  const restartGame = () => {\r\n    setTiles(generateBoard());\r\n  };\r\n\r\n  const registerMove = (move: MoveKeyCode) => {\r\n    setMoves([...moves, move]);\r\n  };\r\n\r\n  return { tiles, registerMove, restartGame };\r\n};\r\n","import React from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}