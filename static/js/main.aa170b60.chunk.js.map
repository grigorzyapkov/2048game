{"version":3,"sources":["utils/boardUtils.ts","constants/constants.ts","components/Tiles/Tile.tsx","components/Tiles/TilesList.tsx","components/Button/Button.tsx","components/Board/GameResult.tsx","components/Board/Board.tsx","components/Board/BoardProvider.tsx","components/Board/BoardContainer.tsx","hooks/useLocalStorage.ts","components/ScoreBox/ScoreBox.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","constants/regex.ts","components/GameFooter/GameFooter.tsx","utils/utils.ts","components/Game/Game.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["INDICES","areTilesEqual","t1","t2","Object","keys","length","every","p","shiftHorizontally","line","direction","shift","v","positionY","position","shiftVertically","positionX","getColumn","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","i","reverse","value","j","generateBoard","tilesCount","tiles","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","id","getNextId","type","some","x","getRow","row","filter","column","getMaxId","max","apply","map","MOVES_MAP","flat","ScreenSizeBreakpoint","TilesScreenTransformFactor","KEYBOARD_ARROW_TO_DIRECTION_MAP","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","Tile","memo","props","className","style","transform","y","TilesList","factor","TileContainer","useState","calcFactor","setFactor","useEffect","handleResize","window","addEventListener","removeEventListener","sortedTiles","innerWidth","Button","children","onClick","DATA","WIN","message","buttonText","containerClass","GAME_OVER","Result","isWin","onContinue","onRestart","playAfterWin","GameResultContainer","useGameContext","gameState","dispatch","status","BoardGrid","grid","Array","from","rowId","columns","colId","Board","GameResult","BoardProvider","useReducer","boardReducer","initState","boardState","payload","moves","loading","setTimeout","state","action","lastMove","currGameState","nextGameState","slice","Error","startClientX","startClientY","BoardContainer","handleTouchStart","event","touches","startTouch","clientX","clientY","handleTouchEnd","endTouch","changedTouches","endClientX","endClientY","xDiff","yDiff","abs","boardContainer","document","getElementById","GAME_ID","useStateReducer","prevState","newState","getInitialValue","key","defaultValue","localStorage","getItem","error","console","log","useGameLocalStorage","reducer","setItem","ScoreBox","title","score","ScoresContainer","stateReducer","newPoints","oldAddScore","innerText","newAddScore","cloneNode","parentNode","replaceChild","bestScore","containsTile","tile","t","find","lastGeneratedTileId","reduce","acc","curr","GameTitle","GameDescription","href","GameHeader","_","REGEX_MAP","mobileDevice","mobileDeviceExtend","Section","bottomSeparator","GameRules","text","navigator","userAgent","vendor","test","substring","LearnMore","target","rel","GameFooter","GameContext","React","createContext","getGameStatus","tilesMap","tilesOnSamePosition","movePossible","arr1","arr2","getCoordinate","isGameOver","isGameWon","gameReducer","move","b1","b2","values","forEach","merge","shouldChangeStatus","GameProvider","handleKeyPress","e","preventDefault","Provider","Game","context","useContext","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0VAEMA,EAAU,CAAC,EAAG,EAAG,EAAG,GAMbC,EAAgB,SAACC,EAAUC,GAAuB,IAAD,IAC5D,OACU,OAAPD,GAAsB,OAAPC,IACdD,IAAE,UAAIE,OAAOC,KAAKH,UAAhB,aAAI,EAAiBI,YAAaH,IAAE,UAAIC,OAAOC,KAAKF,UAAhB,aAAI,EAAiBG,UAC3DF,OAAOC,KAAKH,GAAIK,OAAM,SAACC,GAAD,OAAON,EAAGM,KAAOL,EAAGK,OAkG1CC,EAAoB,SAACC,EAAcC,GACvC,OAAOC,EACLF,GACA,SAACG,GAAD,OAAaA,EAAEC,aACf,SAACD,EAASE,GAAV,OAAgCF,EAAEC,UAAYC,IAC9CJ,IAIEK,EAAkB,SAACN,EAAcC,GACrC,OAAOC,EACLF,GACA,SAACG,GAAD,OAAaA,EAAEI,aACf,SAACJ,EAASE,GAAV,OAAgCF,EAAEI,UAAYF,IAC9CJ,IAIEC,EAAQ,SACZF,EACAQ,EACAC,EACAR,GAEA,GAAoB,IAAhBD,EAAKJ,OACP,MAAO,GAET,IAAIc,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUb,IAC/CU,EAAOI,MAAK,SAACC,EAAIC,GAAL,OAAYR,EAAUO,GAAMP,EAAUQ,MAGlD,IADA,IAAMC,EAA8B,SAAdhB,EAAuB,EAAI,EAAIS,EAAOd,OACnDsB,EAAI,EAAGA,EAAIR,EAAOd,OAAQsB,IACjCT,EAAUC,EAAOQ,GAAID,EAAgBC,GAGzB,SAAdjB,GAAwBS,EAAOS,UAE/B,IADA,IAAID,EAAIR,EAAOd,OAAS,EACjBsB,GAAK,GACV,GAAIR,EAAOQ,GAAGE,QAAUV,EAAOQ,EAAI,GAAGE,OAA6B,OAApBV,EAAOQ,GAAGE,MASzDF,QATA,CACE,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAI,EAAGG,IAAK,CAC/B,IAAMnB,EAAsB,UAAdD,EAAwB,GAAK,EAC3CQ,EAAUC,EAAOW,GAAIb,EAAUE,EAAOW,IAAMnB,GAE9CgB,GAAK,EAOT,OAAOR,GAGIY,EAAgB,WAE3B,IAFgE,IAApCC,EAAmC,uDAAd,EAC7CC,EAAQ,GACLD,EAAa,GAClBC,EAAK,sBAAOA,GAAP,CAAcC,EAAiBD,KACpCD,IAGF,OAAOC,GAGIC,EAAmB,SAACD,GAC/B,IAAME,EAAiB,SAACrB,GAGtB,MAAO,CAFGsB,KAAKC,MAAMvB,EAAW,GACtBA,EAAW,IAIvBsB,KAAKC,MAAsB,GAAhBD,KAAKE,UAIhB,IAFA,IAAIxB,EAAWsB,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BC,EAAcJ,EAAerB,GAC1B0B,EAAQ,WAAR,GAASP,GAAT,mBAAmBM,MAExBA,EAAcJ,EADdrB,EAAwB,KAAbA,EAAkB,EAAIA,EAAW,GAI9C,IAAMe,EAAeO,KAAKE,UAAY,GAAM,EAAI,EAEhD,MAAO,CACLG,GAAIC,EAAUT,GACdJ,QACAc,KAAM,MACN3B,UAAWuB,EAAY,GACvB1B,UAAW0B,EAAY,KAIrBC,EAAW,SACfP,EACAjB,EACAH,GAEA,OAAOoB,EAAMW,MACX,SAACC,GAAD,OAAOA,EAAE7B,YAAcA,GAAa6B,EAAEhC,YAAcA,MAI3CiC,EAAS,SAACb,EAAec,GAAhB,OACpBd,EAAMe,QAAO,SAACH,GAAD,OAAOA,EAAE7B,YAAc+B,MAEzB9B,EAAY,SAACgB,EAAegB,GAAhB,OACvBhB,EAAMe,QAAO,SAACH,GAAD,OAAOA,EAAEhC,YAAcoC,MAEzBP,EAAY,SAACT,GACxB,OAAOiB,EAASjB,GAAS,GAIdiB,EAAW,SAACjB,GACvB,OAAOG,KAAKe,IAAIC,MAAMhB,KAAf,CAAsB,GAAtB,mBAA4BH,EAAMoB,KAAI,SAACR,GAAD,OAAOA,EAAEJ,UAG3Ca,EAAwC,CACnD,GAhIoB,SAACrB,GACrB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBZ,EAAgBE,EAAUgB,EAAON,GAAI,WACrC4B,QA8HF,KA3HsB,SAACtB,GACvB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBZ,EAAgBE,EAAUgB,EAAON,GAAI,YACrC4B,QAyHF,MA5IuB,SAACtB,GACxB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OACjBnB,EAAkBsC,EAAOb,EAAON,GAAI,YACpC4B,QA0IF,KAvIsB,SAACtB,GACvB,OAAOlC,EAAQsD,KAAI,SAAC1B,GAAD,OAAOnB,EAAkBsC,EAAOb,EAAON,GAAI,WAAS4B,SCzF5DC,EACP,IADOA,EAER,IAQQC,EACP,GADOA,EAER,GAFQA,EAGR,IAGQC,EAAgE,CAC3EC,QAAS,KACTC,UAAW,OACXC,WAAY,QACZC,UAAW,Q,eCFEC,EAZFC,gBAAK,SAACC,GAEjB,OACE,qBACEC,UAAS,oBAAeD,EAAMpC,OAC9BsC,MAAO,CAAEC,UAAU,aAAD,OAAeH,EAAMpB,EAArB,eAA6BoB,EAAMI,EAAnC,QAFpB,SAIE,qBAAKH,UAAS,oBAAeD,EAAMtB,MAAnC,SAA4CsB,EAAMpC,aCZlDyC,G,MAAY,SAACL,GACjB,OACE,8BACGA,EAAMhC,MAAMoB,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAEEhB,MAAOgB,EAAEhB,MACTc,KAAME,EAAEF,KACRE,EAAGA,EAAEhC,UAAYoD,EAAMM,OACvBF,EAAGxB,EAAE7B,UAAYiD,EAAMM,QAJlB1B,EAAEJ,WAWJ+B,EAAgB,SAACP,GAA8B,IAAD,EAE7BQ,mBAA0BC,KAFG,mBAElDH,EAFkD,KAE1CI,EAF0C,KAIzDC,qBAAU,WACR,IAAMC,EAAe,WACnBF,EAAUD,MAKZ,OAFAI,OAAOC,iBAAiB,SAAUF,GAE3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MACjD,IAEH,IAAMI,EAAchB,EAAMhC,MAAMV,MAAK,SAACtB,EAAIC,GAAL,OAAYD,EAAGwC,GAAKvC,EAAGuC,MAC5D,OACE,qBAAKyB,UAAU,gBAAf,SACE,cAAC,EAAD,CAAWjC,MAAOgD,EAAaV,OAAQA,OAKvCG,EAAa,WACjB,OAAII,OAAOI,YAAc1B,EAChBC,EAELqB,OAAOI,YAAc1B,EAChBC,EAGFA,GC1CI0B,G,MAAS,SAAClB,GAAwB,IACrCxB,EAAqCwB,EAArCxB,GAAI2C,EAAiCnB,EAAjCmB,SAAUlB,EAAuBD,EAAvBC,UAAWmB,EAAYpB,EAAZoB,QAEjC,OACE,wBACE5C,GAAIA,EACJyB,UAAS,oBAAeA,GAAa,IACrCmB,QAASA,EAHX,SAKGD,MCfDE,EAAO,CACXC,IAAK,CACHC,QAAS,4BACTC,WAAY,aACZC,eAAgB,iBAElBC,UAAW,CACTH,QAAS,aACTC,WAAY,YACZC,eAAgB,mBAIdE,EAAS,SAAC3B,GAMT,IACG4B,EAA+C5B,EAA/C4B,MAAOC,EAAwC7B,EAAxC6B,WAAYC,EAA4B9B,EAA5B8B,UAAWC,EAAiB/B,EAAjB+B,aADlC,EAGFH,GAASG,EAAeV,EAAKC,IAAMD,EAAKK,UADlCH,EAFJ,EAEIA,QAASC,EAFb,EAEaA,WAAYC,EAFzB,EAEyBA,eAG7B,OACE,sBAAKxB,UAAS,qBAAgBwB,GAA9B,UACE,4BAAIF,IACJ,gCACGK,GACC,cAAC,EAAD,CAAQ3B,UAAU,iBAAiBmB,QAAS,kBAAMS,KAAlD,sBAIF,cAAC,EAAD,CAAQT,QAAS,kBAAMU,KAAvB,SAAqCN,WAmC9BQ,EA7Ba,SAAChC,GAA8B,IAAD,EACxBiC,KAAxBC,EADgD,EAChDA,UAAWC,EADqC,EACrCA,SAEXC,EAAWF,EAAXE,OAUFL,EAAe/B,EAAMhC,MAAMW,MAAK,SAACC,GAAD,OAAmB,OAAZA,EAAEhB,SAC/C,OACE,mCACc,gBAAXwE,GAAuC,mBAAXA,GAC3B,cAAC,EAAD,CACER,MAAkB,QAAXQ,EACPL,aAAcA,EACdD,UAXc,WACpBK,EAAS,CAAEzD,KAAM,aAWXmD,WAhBe,WACrBM,EAAS,CAAEzD,KAAM,cAgBX0D,OAAQA,OC7DZC,EAAY,WAChB,IAAMC,EAAOC,MAAMC,KAAKD,MAAM,GAAGpG,QAAQiD,KAAI,SAACqD,GAC5C,IAAMC,EAAUH,MAAMC,KAAKD,MAAM,GAAGpG,QAAQiD,KAAI,SAACuD,GAAD,OAC9C,qBAAiB1C,UAAU,QAAjB0C,MAEZ,OACE,qBAAiB1C,UAAU,MAA3B,SACGyC,GADOD,MAMd,OAAO,qBAAKxC,UAAU,gBAAf,SAAgCqC,KAc1BM,EAXD,SAAC5C,GAEb,OACE,sBAAKxB,GAAG,iBAAR,UACE,cAACqE,EAAD,CAAY7E,MAAOgC,EAAMhC,QACzB,cAAC,EAAD,IACA,cAAC,EAAD,CAAOA,MAAOgC,EAAMhC,YCjBb8E,G,MAAgB,WAAO,IAC1BZ,EAAcD,KAAdC,UADyB,EAGFa,qBAAWC,EAAcC,KAHvB,mBAG1BC,EAH0B,KAGdf,EAHc,KAwBjC,OAnBAxB,qBAAU,WACRwB,EAAS,CAAEzD,KAAM,UAAWyE,QAASjB,MACpC,CAACA,IAEJvB,qBAAU,WACJuC,EAAWE,MAAMhH,OAAS,GAAK8G,EAAWG,UAI9ClB,EAAS,CAAEzD,KAAM,cAEjB4E,YAAW,WACTnB,EAAS,CACPzD,KAAM,cAEP,QAEF,CAACwE,IAEG,cAAC,EAAD,CAAOlF,MAAOkF,EAAWlF,UAGlC,SAASgF,EAAaO,EAAmBC,GACvC,OAAQA,EAAO9E,MACb,IAAK,UAEH,OADmB8E,EAAOL,QAAQM,UACM,IAAvBF,EAAMvF,MAAM5B,OACpB6G,EAAUO,EAAOL,SAGnB,2BACFI,GADL,IAEEH,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAmBI,EAAOL,YAGnC,IAAK,YACH,IAAMO,EAAgBH,EAAMH,MAAM,GAC5BO,EAAgBJ,EAAMH,MAAM,GAC5BpF,EAAQqB,EAAUsE,EAAcF,UAAUC,EAAc1F,OAE9D,OAAO,2BAAKuF,GAAZ,IAAmBF,SAAS,EAAMrF,UAEpC,IAAK,UACH,IAAM2F,EAAgBJ,EAAMH,MAAM,GAClC,MAAO,CACLA,MAAOG,EAAMH,MAAMQ,MAAM,GACzBP,SAAS,EACTrF,MAAO2F,EAAc3F,OAGzB,QACE,MAAM,IAAI6F,MAAJ,4BAA+BL,KAK3C,IAAMP,EAAY,SAACf,GACjB,OAAIA,EACK,CAAEkB,MAAO,CAAClB,GAAYmB,SAAS,EAAOrF,MAAOkE,EAAUlE,OAEzD,CAAEoF,MAAO,GAAIC,SAAS,EAAOrF,MAAO,KCtEzC8F,EAAe,KACfC,EAAe,KAENC,EAAiB,WAAO,IAC3B7B,EAAaF,KAAbE,SAuDR,OArDAxB,qBAAU,WACR,SAASsD,EAAiBC,GACxB,GAA6B,IAAzBA,EAAMC,QAAQ/H,OAAc,CAC9B,IAAMgI,EAAaF,EAAMC,QAAQ,GACjCL,EAAeM,EAAWC,QAC1BN,EAAeK,EAAWE,SAI9B,SAASC,EAAeL,GACtB,GAAKJ,GAAiBC,KAAgBG,EAAMC,QAAQ/H,OAAS,GAA7D,CAIA,IAAMoI,EAAWN,EAAMO,eAAe,GAClCC,EAAaF,EAASH,QACtBM,EAAaH,EAASF,QAEtBM,EAAQd,EAAeY,EACvBG,EAAQd,EAAeY,EAEvBxG,KAAK2G,IAAIF,GAASzG,KAAK2G,IAAID,GAG3B1C,EAFEyC,EAAQ,EAED,CAAElG,KAAM,OAAQyE,QAAS,SAGzB,CAAEzE,KAAM,OAAQyE,QAAS,SAKlChB,EAFE0C,EAAQ,EAED,CAAEnG,KAAM,OAAQyE,QAAS,QAGzB,CAAEzE,KAAM,OAAQyE,QAAS,OAItCW,EAAe,KACfC,EAAe,MAGjB,IAAMgB,EAAiBC,SAASC,eAAe,kBAI/C,OAHAF,EAAejE,iBAAiB,aAAcmD,GAC9Cc,EAAejE,iBAAiB,WAAYyD,GAErC,WACLQ,EAAehE,oBAAoB,aAAckD,GACjDc,EAAehE,oBAAoB,WAAYwD,MAEhD,CAACpC,IAEG,cAAC,EAAD,KC7DH+C,G,MAAU,YAEVC,EAAkB,SAACC,EAAWC,GAClC,MAA2B,oBAAbA,EAA0BA,EAASD,GAAaC,GAG1DC,EAAkB,SAACC,EAAaC,GACpC,IACE,IAAMtD,EAAY/E,KAAKC,MAAMyD,OAAO4E,aAAaC,QAAQR,IACnDtH,EAAK,OAAGsE,QAAH,IAAGA,OAAH,EAAGA,EAAYqD,GAC1B,cAAO3H,QAAP,IAAOA,IAAS4H,EAChB,MAAOG,GAEP,OADAC,QAAQC,IAAIF,GACLH,IAuBIM,MAnBf,SACEP,EACAC,GAE2B,IAD3BO,EAC0B,uDADhBZ,EACgB,EACApC,qBACxBgD,EACAT,EAAgBC,EAAKC,IAHG,mBACnB5H,EADmB,KACZuE,EADY,KAY1B,OANAxB,qBAAU,WACR,IAAI4C,EAAQpG,KAAKC,MAAMyD,OAAO4E,aAAaC,QAAQR,KAAa,GAChE3B,EAAMgC,GAAO3H,EACbiD,OAAO4E,aAAaO,QAAQd,EAAS/H,KAAKE,UAAUkG,MACnD,CAAC3F,EAAO2H,IAEJ,CAAC3H,EAAOuE,IC1BJ8D,G,MAAW,SAACjG,GACvB,OAAO,sBAAKC,UAAU,WAAf,UACL,sBAAMA,UAAU,QAAhB,SAAyBD,EAAMkG,QAC/B,sBAAMjG,UAAU,QAAhB,SAAyBD,EAAMmG,aCFtBC,G,MAAkB,WAAO,IAC5BlE,EAAcD,KAAdC,UAD2B,EAGT4D,EACxB,SACA7C,IACAoD,IANiC,mBAG5B9C,EAH4B,KAGrBpB,EAHqB,KAsBnC,OAbAxB,qBAAU,WACRwB,EAAS,CAAEzD,KAAM,SAAUyE,QAASjB,EAAUlE,UAC7C,CAACkE,EAAUlE,MAAOmE,IAErBxB,qBAAU,WACR,GAAI4C,EAAM+C,UAAY,EAAG,CACvB,IAAMC,EAAcvB,SAASC,eAAe,iBAC5CsB,EAAYC,UAAZ,WAA4BjD,EAAM+C,WAClC,IAAMG,EAAcF,EAAYG,WAAU,GAC1CH,EAAYI,WAAWC,aAAaH,EAAaF,MAElD,CAAChD,IAGF,sBAAKtD,UAAU,kBAAf,UACE,sBAAKC,MAAO,CAAErD,SAAU,YAAxB,UACE,cAAC,EAAD,CAAUqJ,MAAM,QAAQC,MAAO5C,EAAM4C,QACrC,qBAAKlG,UAAU,WAAWzB,GAAG,qBAG/B,cAAC,EAAD,CAAU0H,MAAM,OAAOC,MAAO5C,EAAMsD,iBAKpC5D,EAAY,WAAsC,IAArCjF,EAAoC,uDAApB,GACjC,MAAO,CACLmI,MAAO,EACPG,UAAW,EACXO,UAAW,EACX7I,UAIE8I,EAAe,SAAC9I,EAAe+I,GACnC,OAAO/I,EAAMW,MAAK,SAACqI,GAAD,OAAOA,EAAExI,KAAOuI,EAAKvI,OAGnC6H,GAAe,SAAC9C,EAAoBC,GACxC,OAAQA,EAAO9E,MACb,IAAK,SACH,IAAMV,EAAQwF,EAAOL,QAGrB,GACEI,EAAMvF,MAAM5B,SAAW4B,EAAM5B,QAC7BmH,EAAMvF,MAAM3B,OAAM,SAAC2K,GAAD,OAAOF,EAAa9I,EAAOgJ,MAE7C,OAAOzD,EAIT,GACmB,IAAjBvF,EAAM5B,QACN,CAAC,EAAG,GAAGC,OAAM,SAACmC,GAAD,OAAQR,EAAMiJ,MAAK,SAACF,GAAD,OAAUA,EAAKvI,KAAOA,UACrD+E,EAAMvF,MAAM3B,OAAM,SAAC2K,GAAD,OAAOF,EAAa9I,EAAOgJ,MAE9C,OAAO,2BAAK/D,EAAUjF,IAAtB,IAA8B6I,UAAWtD,EAAMsD,YAIjD,GACEtD,EAAMvF,MAAM3B,OAAM,SAAC2K,GAAD,OAAOF,EAAa9I,EAAOgJ,OAC7ChJ,EAAM5B,SAAWmH,EAAMvF,MAAM5B,OAAS,EAEtC,OAAO,2BAAKmH,GAAZ,IAAmBvF,MAAOA,EAAOsI,UAAW,IAI9C,IAAMY,EAAsBjI,EAASjB,GAC/BsI,EAAYtI,EAAMmJ,QAAO,SAACC,EAAaC,GAK3C,OAAOD,GAHLC,EAAK7I,KAAO0I,GAAuBJ,EAAavD,EAAMvF,MAAOqJ,GACzD,EACAA,EAAKzJ,SAEV,GAEGuI,EAAQ5C,EAAM4C,MAAQG,EACtBO,EAAY1I,KAAKe,IAAIiH,EAAO5C,EAAMsD,WAExC,MAAO,CAAE7I,QAAOsI,YAAWH,QAAOU,aAEpC,QACE,MAAM,IAAIhD,MAAJ,iCAAoCL,EAAO9E,SChGjD4I,I,MAAY,kBAAM,sBAAMrH,UAAU,YAAhB,oBAElBsH,GAAkB,WACtB,OACE,gCACE,4DAA8B,qCAA9B,OACA,uBACA,mBAAGC,KAAK,oBAAR,oCAKOC,GAAa,WAAO,IACvBtF,EAAaF,KAAbE,SAER,OACE,sBAAKlC,UAAU,SAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,OAEF,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEzB,GAAG,iBACH4C,QAAS,SAACsG,GAAD,OAAOvF,EAAS,CAAEzD,KAAM,aAFnC,6BC9BKiJ,GAAY,CACvBC,aACE,2TACFC,mBACE,6hDCAEC,GAAU,SAAC9H,GACf,OACE,sBAAKxB,GAAIwB,EAAMxB,GAAf,UACE,6BAAKwB,EAAMkG,QACVlG,EAAMmB,SACNnB,EAAM+H,gBAAkB,uBAAS,SAKlCC,GAAY,WAChB,ICbuBpK,EDajBqK,GCbiBrK,EDaDsK,UAAUC,WAAaD,UAAUE,OCXrDT,GAAUC,aAAaS,KAAKzK,IAC5B+J,GAAUE,mBAAmBQ,KAAKzK,EAAM0K,UAAU,EAAG,IDWnD,+CACA,4CAEJ,OACE,cAAC,GAAD,CACE9J,GAAG,mBACH0H,MAAM,cACN6B,iBAAe,EAHjB,SAKE,8BACGE,EADH,6FAGE,uCAHF,OAGwB,uCAHxB,0FAIyD,IACvD,yCALF,mBAWAM,GAAY,WAChB,OACE,cAAC,GAAD,CAASrC,MAAM,aAAf,SACE,wDAC0B,IACxB,mBAAGsB,KAAK,uBAAR,kCAFF,0FAIE,mBACEA,KAAK,4CACLgB,OAAO,SACPC,IAAI,aAHN,+BAJF,UAiBOC,GAAa,WACxB,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,QElCAC,GAAcC,IAAMC,cAA4B,MAEhDC,GAAgB,SAAC9K,GACrB,OhBTwB,SAACA,GAezB,GAAIA,EAAM5B,OAAS,IAbS,SAAC4B,GAE3B,IADA,IAAM+K,EAAW,GACTrL,EAAI,EAAGA,EAAGM,EAAM5B,OAAQsB,IAAI,CAClC,IAAM6H,EAAG,UAAMvH,EAAMN,GAAGX,WAAf,OAA2BiB,EAAMN,GAAGd,WAC7C,GAAGmM,EAASxD,GACV,OAAO,EAETwD,EAASxD,IAAO,EAGlB,OAAO,EAGgByD,CAAoBhL,GAC3C,OAAO,EAeT,IAZA,IAAMiL,EAAe,SACnBC,EACAC,EACAC,GAEA,OAAOF,EAAKvK,MAAK,SAACC,GAAD,OACfuK,EAAKxK,MACH,SAACyB,GAAD,OAAOgJ,EAAcxK,KAAOwK,EAAchJ,IAAMxB,EAAEhB,QAAUwC,EAAExC,aAK3DF,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACEuL,EACEpK,EAAOb,EAAON,GACdmB,EAAOb,EAAON,EAAI,IAClB,SAACkB,GAAD,OAAaA,EAAEhC,cAEjBqM,EACEjM,EAAUgB,EAAON,GACjBV,EAAUgB,EAAON,EAAI,IACrB,SAACkB,GAAD,OAAaA,EAAE7B,aAGjB,OAAO,EAIX,OAAO,EgBvCHsM,CAAWrL,GACN,YhBdc,SAACA,GACxB,OAAOA,EAAMW,MAAK,SAACoI,GAAD,OAAyB,OAAfA,EAAKnJ,SgBgB7B0L,CAAUtL,GACL,MAGF,eAGHiF,GAAY,WAAgC,IAA/BlF,EAA8B,uDAAjB,EAC9B,MAAO,CACLC,MAAOF,EAAcC,GACrB0F,SAAU,KACVrB,OAAQ,gBAIZ,SAASmH,GAAYhG,EAAkBC,GACrC,OAAQA,EAAO9E,MACb,IAAK,UACH,OAAOuE,KAET,IAAK,WACH,OAAO,2BAAKM,GAAZ,IAAmBnB,OAAQ,mBAE7B,IAAK,OACH,IACIpE,GAAgBwL,EADPnK,EAAUmE,EAAOL,UACLI,EAAMvF,OAC/B,GhBvDmByL,EgBuDNlG,EAAMvF,MhBvDY0L,EgBuDL1L,EhBtDvByL,EAAGpN,OAAM,SAACuC,GAAD,OAAO8K,EAAG/K,MAAK,SAACyB,GAAD,OAAOrE,EAAc6C,EAAGwB,SgBuDjD,OAAOmD,EAGTvF,EhBQe,SAACA,GACpB,IAAIQ,EAAKC,EAAUT,GACf2L,EAAkC,GAYtC,OAVA3L,EAAM4L,SAAQ,SAACjN,GACb,IAAM4I,EAAG,UAAM5I,EAAEI,WAAR,OAAoBJ,EAAEC,WAC/B,GAAI+M,EAAOpE,GAAM,CACf,IAAM3H,EAAmB,EAAVjB,EAAEiB,MACjB+L,EAAOpE,GAAP,2BAAmB5I,GAAnB,IAAsB6B,GAAIA,IAAMZ,QAAOc,KAAM,gBAE7CiL,EAAOpE,GAAO5I,KAIXT,OAAOyN,OAAOA,GgBtBTE,CAAM7L,GACdA,EAAK,sBAAOA,GAAP,CAAcC,EAAiBD,KACpC,IAAMoE,EAAS0G,GAAc9K,GACvB8L,EACa,mBAAjBvG,EAAMnB,QAA0C,cAAXA,EAEvC,MAAO,CACLpE,QACAyF,SAAUD,EAAOL,QACjBf,OAAQ0H,EAAqB1H,EAASmB,EAAMnB,QAGhD,QACE,MAAM,IAAIyB,MAAJ,4BAA+BL,IhBxEnB,IAACiG,EAAYC,EgB6ErC,IAAMK,GAAe,SAAC/J,GAAW,IAAD,EACJ8F,EACxB,OACA7C,KACAsG,IAJ4B,mBACvBhG,EADuB,KAChBpB,EADgB,KAwB9B,OAjBAxB,qBAAU,WACR,IAAMqJ,EAAiB,SAACC,GACtBA,EAAEC,iBACF,IAAMzN,EACJgD,EAAgCwK,EAAE1E,KAChC9I,GACF0F,EAAS,CAAEzD,KAAM,OAAQyE,QAAS1G,KAMtC,OAFAuI,SAASlE,iBAAiB,UAAWkJ,GAE9B,WACLhF,SAASjE,oBAAoB,UAAWiJ,MAEzC,CAAC7H,IAGF,cAACwG,GAAYwB,SAAb,CAAsBvM,MAAO,CAAEsE,UAAWqB,EAAOpB,YAAjD,SACGnC,EAAMmB,YAKPiJ,GAAO,WACX,OACE,cAAC,GAAD,UACE,sBAAKnK,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,OAEF,cAAC,GAAD,UAMR,SAASgC,KACP,IAAMoI,EAAUC,qBAAW3B,IAC3B,QAAgB4B,IAAZF,EACF,MAAM,IAAIxG,MAAM,4DAElB,OAAOwG,ECtHMG,OAVf,WACE,OACE,8BACE,+BACE,cAAC,GAAD,SCOOC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFpG,SAASC,eAAe,SAM1BwF,O","file":"static/js/main.aa170b60.chunk.js","sourcesContent":["import { Value, Tile, Direction } from \"../components/Interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n\r\nexport const isGameWon = (tiles: Tile[]) => {\r\n  return tiles.some((tile) => tile.value === 2048);\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n\r\n  const tilesOnSamePosition = (tiles: Tile[]) => {\r\n    const tilesMap = {};\r\n    for(let i = 0; i< tiles.length; i++){\r\n      const key = `${tiles[i].positionX}${tiles[i].positionY}`;\r\n      if(tilesMap[key]){\r\n        return true;\r\n      }\r\n      tilesMap[key] = true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (tiles.length < 16 || tilesOnSamePosition(tiles)) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): Tile[] => {\r\n  let id = getNextId(tiles);\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = (v.value * 2) as Value;\r\n      values[key] = { ...v, id: id++, value, type: \"merged\" };\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return Object.values(values);\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== 2048) {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while (tilesCount > 0) {\r\n    tiles = [...tiles, createRandomTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n};\r\n\r\nexport const createRandomTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? 4 : 2;\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    type: \"new\",\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nexport const getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n\r\nexport const MOVES_MAP: {[key: string]: Function } = {\r\n  \"up\": moveUp,\r\n  \"down\": moveDown,\r\n  \"right\": moveRight,\r\n  \"left\": moveLeft,\r\n};\r\n","import { Direction, TransformFactor } from \"../components/Interfaces\";\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n};\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: { [key: string]: TransformFactor } = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121,\r\n};\r\n\r\nexport const KEYBOARD_ARROW_TO_DIRECTION_MAP: { [key: string]: Direction } = {\r\n  ArrowUp: \"up\",\r\n  ArrowDown: \"down\",\r\n  ArrowRight: \"right\",\r\n  ArrowLeft: \"left\",\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { TileType, Value } from \"../Interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  type: TileType\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Tile = memo((props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Tile;","import React, { useEffect, useState } from \"react\";\r\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\r\nimport { Tile, TransformFactor } from \"../Interfaces\";\r\nimport {default as BoardTile} from \"./Tile\";\r\n\r\nimport \"./TilesList.scss\";\r\n\r\nconst TilesList = (props: { tiles: Tile[], factor: number }) => {\r\n  return (\r\n    <div>\r\n      {props.tiles.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          type={x.type}\r\n          x={x.positionY * props.factor}\r\n          y={x.positionX * props.factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TileContainer = (props: { tiles: Tile[] }) => {\r\n\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const sortedTiles = props.tiles.sort((t1, t2) => t1.id - t2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList tiles={sortedTiles} factor={factor}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.XS) {\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.S) {\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n};","import React from \"react\";\r\n\r\nimport \"./Button.scss\";\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  const { id, children, className, onClick } = props;\r\n\r\n  return (\r\n    <button\r\n      id={id}\r\n      className={`appButton ${className || \"\"}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport { GameStatus, Tile } from \"../Interfaces\";\r\n\r\nconst DATA = {\r\n  WIN: {\r\n    message: \"Congratulations! You Win!\",\r\n    buttonText: \"Play again\",\r\n    containerClass: \"gameResultWin\",\r\n  },\r\n  GAME_OVER: {\r\n    message: \"Game Over!\",\r\n    buttonText: \"Try again\",\r\n    containerClass: \"gameResultLose\",\r\n  },\r\n};\r\n\r\nconst Result = (props: {\r\n  isWin: boolean;\r\n  onContinue: () => void;\r\n  onRestart: () => void;\r\n  playAfterWin: boolean;\r\n  status: GameStatus;\r\n}) => {\r\n  const { isWin, onContinue, onRestart, playAfterWin } = props;\r\n  const { message, buttonText, containerClass } =\r\n    isWin || playAfterWin ? DATA.WIN : DATA.GAME_OVER;\r\n\r\n  return (\r\n    <div className={`gameResult ${containerClass}`}>\r\n      <p>{message}</p>\r\n      <div>\r\n        {isWin && (\r\n          <Button className=\"continueButton\" onClick={() => onContinue()}>\r\n            Continue\r\n          </Button>\r\n        )}\r\n        <Button onClick={() => onRestart()}>{buttonText}</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameResultContainer = (props: { tiles: Tile[] }) => {\r\n  const { gameState, dispatch } = useGameContext();\r\n\r\n  const { status } = gameState;\r\n\r\n  const handleContinue = () => {\r\n    dispatch({ type: \"continue\" });\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    dispatch({ type: \"restart\" });\r\n  };\r\n\r\n  const playAfterWin = props.tiles.some((x) => x.value === 2048);\r\n  return (\r\n    <>\r\n      {status !== \"IN_PROGRESS\" && status !== \"PLAY_AFTER_WIN\" && (\r\n        <Result\r\n          isWin={status === \"WIN\"}\r\n          playAfterWin={playAfterWin}\r\n          onRestart={handleRestart}\r\n          onContinue={handleContinue}\r\n          status={status}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameResultContainer;\r\n","import React from \"react\";\r\nimport { Tile } from \"../Interfaces\";\r\nimport Tiles from \"../Tiles\";\r\nimport GameResult from \"./GameResult\";\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst Board = (props: { tiles: Tile[] }) => {\r\n\r\n  return (\r\n    <div id=\"boardContainer\">\r\n      <GameResult tiles={props.tiles} />\r\n      <BoardGrid />\r\n      <Tiles tiles={props.tiles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { MOVES_MAP } from \"../../utils/boardUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { GameState } from \"../Interfaces\";\r\nimport Board from \"./Board\";\r\n\r\nimport \"./Board.scss\";\r\nimport { BoardActionType, BoardState } from \"./Interfaces\";\r\n\r\nexport const BoardProvider = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [boardState, dispatch] = useReducer(boardReducer, initState());\r\n  \r\n  useEffect(() => {\r\n    dispatch({ type: \"addMove\", payload: gameState });\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (boardState.moves.length < 2 || boardState.loading) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: \"startMove\" });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"endMove\",\r\n      });\r\n    }, 100);\r\n\r\n  }, [boardState]);\r\n\r\n  return <Board tiles={boardState.tiles} />;\r\n};\r\n\r\nfunction boardReducer(state: BoardState, action: BoardActionType): BoardState {\r\n  switch (action.type) {\r\n    case \"addMove\": {\r\n      const isNewGame = !action.payload.lastMove;\r\n      if (isNewGame || state.tiles.length === 0) {\r\n        return initState(action.payload);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        moves: [...state.moves, action.payload],\r\n      };\r\n    }\r\n    case \"startMove\": {\r\n      const currGameState = state.moves[0];\r\n      const nextGameState = state.moves[1];\r\n      const tiles = MOVES_MAP[nextGameState.lastMove](currGameState.tiles);\r\n\r\n      return { ...state, loading: true, tiles };\r\n    }\r\n    case \"endMove\": {\r\n      const nextGameState = state.moves[1];\r\n      return {\r\n        moves: state.moves.slice(1),\r\n        loading: false,\r\n        tiles: nextGameState.tiles,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst initState = (gameState?: GameState): BoardState => {\r\n  if (gameState) {\r\n    return { moves: [gameState], loading: false, tiles: gameState.tiles };\r\n  }\r\n  return { moves: [], loading: false, tiles: [] };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGameContext } from \"../Game\";\r\nimport { BoardProvider } from \"./BoardProvider\";\r\n\r\nlet startClientX = null;\r\nlet startClientY = null;\r\n\r\nexport const BoardContainer = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  useEffect(() => {\r\n    function handleTouchStart(event) {\r\n      if (event.touches.length === 1) {\r\n        const startTouch = event.touches[0];\r\n        startClientX = startTouch.clientX;\r\n        startClientY = startTouch.clientY;\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      if (!startClientX || !startClientY || event.touches.length > 0) {\r\n        return;\r\n      }\r\n    \r\n      const endTouch = event.changedTouches[0];\r\n      var endClientX = endTouch.clientX;\r\n      var endClientY = endTouch.clientY;\r\n    \r\n      var xDiff = startClientX - endClientX;\r\n      var yDiff = startClientY - endClientY;\r\n    \r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        if (xDiff < 0) {\r\n          /* right swipe */\r\n          dispatch({ type: \"move\", payload: \"right\" });\r\n        } else {\r\n          /* left swipe */\r\n          dispatch({ type: \"move\", payload: \"left\" });\r\n        }\r\n      } else {\r\n        if (yDiff < 0) {\r\n          /* down swipe */\r\n          dispatch({ type: \"move\", payload: \"down\" });\r\n        } else {\r\n          /* up swipe */\r\n          dispatch({ type: \"move\", payload: \"up\" });\r\n        }\r\n      }\r\n      /* reset values */\r\n      startClientX = null;\r\n      startClientY = null;\r\n    }\r\n\r\n    const boardContainer = document.getElementById(\"boardContainer\");\r\n    boardContainer.addEventListener(\"touchstart\", handleTouchStart);\r\n    boardContainer.addEventListener('touchend', handleTouchEnd);\r\n\r\n    return () => {\r\n      boardContainer.removeEventListener(\"touchstart\", handleTouchStart);\r\n      boardContainer.removeEventListener(\"touchend\", handleTouchEnd);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <BoardProvider />;\r\n};\r\n","import React, { useEffect, useReducer } from \"react\";\r\n\r\nconst GAME_ID = \"2048game\";\r\n\r\nconst useStateReducer = (prevState, newState) => {\r\n  return typeof newState === \"function\" ? newState(prevState) : newState;\r\n};\r\n\r\nconst getInitialValue = (key: string, defaultValue: any) => {\r\n  try {\r\n    const gameState = JSON.parse(window.localStorage.getItem(GAME_ID));\r\n    const value = gameState?.[key];\r\n    return value ?? defaultValue;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\nfunction useGameLocalStorage<T>(\r\n  key: string,\r\n  defaultValue: T,\r\n  reducer = useStateReducer\r\n): [T, React.Dispatch<any>] {\r\n  const [value, dispatch] = useReducer(\r\n    reducer,\r\n    getInitialValue(key, defaultValue)\r\n  );\r\n\r\n  useEffect(() => {\r\n    let state = JSON.parse(window.localStorage.getItem(GAME_ID)) || {};\r\n    state[key] = value;\r\n    window.localStorage.setItem(GAME_ID, JSON.stringify(state));\r\n  }, [value, key]);\r\n\r\n  return [value, dispatch];\r\n}\r\n\r\nexport default useGameLocalStorage;\r\n","import React from \"react\";\r\n\r\nimport \"./ScoreBox.scss\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\nexport const ScoreBox = (props: ScoreBoxProps) => {\r\n  return <div className=\"scoreBox\">\r\n    <span className=\"title\">{props.title}</span>\r\n    <span className=\"score\">{props.score}</span>\r\n  </div>\r\n}\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { getMaxId } from \"../../utils/boardUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { Tile } from \"../Interfaces\";\r\nimport ScoreBox from \"../ScoreBox\";\r\nimport { ACTIONTYPE, ScoresState } from \"./Interfaces\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\nexport const ScoresContainer = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [state, dispatch] = useGameLocalStorage(\r\n    \"scores\",\r\n    initState(),\r\n    stateReducer\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"change\", payload: gameState.tiles });\r\n  }, [gameState.tiles, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (state.newPoints > 0) {\r\n      const oldAddScore = document.getElementById(\"additionScore\");\r\n      oldAddScore.innerText = `+${state.newPoints}`;\r\n      const newAddScore = oldAddScore.cloneNode(true);\r\n      oldAddScore.parentNode.replaceChild(newAddScore, oldAddScore);\r\n    }\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={state.score} />\r\n        <div className=\"addScore\" id=\"additionScore\"></div>\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={state.bestScore} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initState = (tiles: Tile[] = []): ScoresState => {\r\n  return {\r\n    score: 0,\r\n    newPoints: 0,\r\n    bestScore: 0,\r\n    tiles,\r\n  };\r\n};\r\n\r\nconst containsTile = (tiles: Tile[], tile: Tile): boolean => {\r\n  return tiles.some((t) => t.id === tile.id);\r\n};\r\n\r\nconst stateReducer = (state: ScoresState, action: ACTIONTYPE) => {\r\n  switch (action.type) {\r\n    case \"change\": {\r\n      const tiles = action.payload;\r\n\r\n      // handles page refresh\r\n      if (\r\n        state.tiles.length === tiles.length &&\r\n        state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      // handles restart\r\n      if (\r\n        tiles.length === 2 &&\r\n        [1, 2].every((id) => tiles.find((tile) => tile.id === id)) &&\r\n        !state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return { ...initState(tiles), bestScore: state.bestScore };\r\n      }\r\n\r\n      // handles add new tile\r\n      if (\r\n        state.tiles.every((t) => containsTile(tiles, t)) &&\r\n        tiles.length === state.tiles.length + 1\r\n      ) {\r\n        return { ...state, tiles: tiles, newPoints: 0 };\r\n      }\r\n\r\n      // handles merge\r\n      const lastGeneratedTileId = getMaxId(tiles);\r\n      const newPoints = tiles.reduce((acc: number, curr: Tile) => {\r\n        const add =\r\n          curr.id === lastGeneratedTileId || containsTile(state.tiles, curr)\r\n            ? 0\r\n            : curr.value;\r\n        return acc + add;\r\n      }, 0);\r\n\r\n      const score = state.score + newPoints;\r\n      const bestScore = Math.max(score, state.bestScore);\r\n\r\n      return { tiles, newPoints, score, bestScore };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst GameDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the numbers to get <b>2048</b>!</span>\r\n      <br />\r\n      <a href=\"#howToPlaySection\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"gameIntro\">\r\n        <GameTitle />\r\n        <GameDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button\r\n          id=\"restartGameBtn\"\r\n          onClick={(_) => dispatch({ type: \"restart\" })}\r\n        >\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const REGEX_MAP = {\r\n  mobileDevice:\r\n    /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,\r\n  mobileDeviceExtend:\r\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i,\r\n};\r\n","import React from \"react\";\r\nimport { isMobile } from \"../../utils/utils\";\r\nimport { SectionProps } from \"./Interfaces\";\r\n\r\nconst Section = (props: SectionProps) => {\r\n  return (\r\n    <div id={props.id}>\r\n      <h4>{props.title}</h4>\r\n      {props.children}\r\n      {props.bottomSeparator ? <hr /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameRules = () => {\r\n  const text = isMobile(navigator.userAgent || navigator.vendor)\r\n    ? \"Swipe with your fingers to move the numbers.\"\r\n    : \"Use your arrow keys to move the numbers.\";\r\n\r\n  return (\r\n    <Section\r\n      id=\"howToPlaySection\"\r\n      title=\"HOW TO PLAY\"\r\n      bottomSeparator\r\n    >\r\n      <p>\r\n        {text} The same numbers will be merged\r\n        into one when they touch. After each move, a new number (\r\n        <strong>2</strong> or <strong>4</strong>) is generated at a random empty\r\n        position. Merge the numbers and build a 2048 number to{\" \"}\r\n        <strong>WIN</strong> the game!\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nconst LearnMore = () => {\r\n  return (\r\n    <Section title=\"LEARN MORE\">\r\n      <p>\r\n        This app is inspired by{\" \"}\r\n        <a href=\"https://play2048.co/\">https://play2048.co/</a>. If you want to\r\n        learn more about the project tech stack or see the code, visit the&nbsp;\r\n        <a\r\n          href=\"https://github.com/grigorzyapkov/2048game\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          Github repository\r\n        </a>\r\n        .\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport const GameFooter = () => {\r\n  return (\r\n    <div>\r\n      <GameRules />\r\n      <LearnMore />\r\n    </div>\r\n  );\r\n};\r\n","import { REGEX_MAP } from \"../constants/regex\";\r\n\r\nexport const isMobile = (value: string) => {\r\n  return (\r\n    REGEX_MAP.mobileDevice.test(value) ||\r\n    REGEX_MAP.mobileDeviceExtend.test(value.substring(0, 4))\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  createRandomTile,\r\n  generateBoard,\r\n  isGameOver,\r\n  isGameWon,\r\n  merge,\r\n  MOVES_MAP,\r\n} from \"../../utils/boardUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport {\r\n  GameContextActionType,\r\n  GameState,\r\n  IGameContext,\r\n  Direction,\r\n  Tile,\r\n  GameStatus\r\n} from \"../Interfaces\";\r\nimport GameFooter from \"../GameFooter\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { KEYBOARD_ARROW_TO_DIRECTION_MAP } from \"../../constants/constants\";\r\n\r\nconst GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst getGameStatus = (tiles: Tile[]): GameStatus => {\r\n  if (isGameOver(tiles)) {\r\n    return \"GAME_OVER\";\r\n  }\r\n\r\n  if (isGameWon(tiles)) {\r\n    return \"WIN\";\r\n  }\r\n\r\n  return \"IN_PROGRESS\";\r\n};\r\n\r\nconst initState = (tilesCount = 2): GameState => {\r\n  return {\r\n    tiles: generateBoard(tilesCount),\r\n    lastMove: null,\r\n    status: \"IN_PROGRESS\",\r\n  };\r\n};\r\n\r\nfunction gameReducer(state: GameState, action: GameContextActionType) {\r\n  switch (action.type) {\r\n    case \"restart\": {\r\n      return initState();\r\n    }\r\n    case \"continue\": {\r\n      return { ...state, status: \"PLAY_AFTER_WIN\" };\r\n    }\r\n    case \"move\": {\r\n      const move = MOVES_MAP[action.payload];\r\n      let tiles: Tile[] = move(state.tiles);\r\n      if (areEqual(state.tiles, tiles)) {\r\n        return state;\r\n      }\r\n\r\n      tiles = merge(tiles);\r\n      tiles = [...tiles, createRandomTile(tiles)];\r\n      const status = getGameStatus(tiles);\r\n      const shouldChangeStatus =\r\n        state.status !== \"PLAY_AFTER_WIN\" || status === \"GAME_OVER\";\r\n\r\n      return {\r\n        tiles,\r\n        lastMove: action.payload,\r\n        status: shouldChangeStatus ? status : state.status,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst GameProvider = (props) => {\r\n  const [state, dispatch] = useGameLocalStorage<GameState>(\r\n    \"game\",\r\n    initState(),\r\n    gameReducer\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const direction: Direction | undefined =\r\n        KEYBOARD_ARROW_TO_DIRECTION_MAP[e.key];\r\n      if (direction) {\r\n        dispatch({ type: \"move\", payload: direction });\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState: state, dispatch }}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst Game = () => {\r\n  return (\r\n    <GameProvider>\r\n      <div className=\"container\">\r\n        <div className=\"gameContainer\">\r\n          <GameHeader />\r\n          <Board />\r\n        </div>\r\n        <GameFooter />\r\n      </div>\r\n    </GameProvider>\r\n  );\r\n};\r\n\r\nfunction useGameContext() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useGameContext must be used within a GameContextProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { Game, useGameContext };\r\n","import React from 'react';\nimport Game from '../Game';\n\nfunction App() {\n  return (\n    <div>\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}