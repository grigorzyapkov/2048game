{"version":3,"sources":["components/GameContainer/GameContainer.tsx","utils/gameUtils.ts","components/Button/Button.tsx","components/Tile/Tile.tsx","components/Board/Board.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameContainer","props","className","children","INDICES","isGameOver","board","length","movePossible","arr1","arr2","getCoordinate","some","x","y","value","i","getRow","positionY","getColumn","positionX","merge","id","getNextId","score","values","forEach","v","key","parseInt","toString","Object","shiftHorizontally","line","direction","shift","position","shiftVertically","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","reverse","j","isExists","row","filter","column","boardState","getMaxId","Math","max","apply","map","areBoardValuesEqual","keys","every","p","Button","onClick","Tile","style","transform","BoardContainer","GameOverContainer","handleRestart","useContext","GameContext","BoardGrid","grid","Array","from","rowId","columns","colId","calcFactor","window","outerWidth","TilesList","useState","factor","setFactor","useEffect","handleResize","addEventListener","removeEventListener","TileContainer","b1","b2","Board","ScoreBox","showAddition","title","ScoresContainer","addScore","div","document","createElement","classList","add","innerText","currentScoreBox","getElementById","childElementCount","replaceChild","lastChild","appendChild","GameTitle","ShortDescription","href","GameHeader","_","React","createContext","MOVES","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","Game","boardInitialState","setBoardState","setScore","setAddScore","handleKeyPress","e","preventDefault","move","newBoardState","console","log","setTimeout","mergedBoard","moveScore","getCoordinates","floor","random","coordinates","addRandomValue","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.947cb5f9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./GameContainer.scss\";\r\n\r\ninterface GameContainerProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const GameContainer = (props: GameContainerProps) => {\r\n  return <div className=\"container\">{props.children}</div>\r\n}","import {\r\n  BoardState,\r\n  BoardValue,\r\n  Direction,\r\n} from \"../components/Game/Interfaces\";\r\nimport { Value } from \"../components/interfaces/interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: BoardState, b2: BoardState) => {\r\n  return b1.every((x) => b2.some((y) => areBoardValuesEqual(x, y)));\r\n};\r\n\r\nexport const isGameOver = (board: BoardState) => {\r\n  if (board.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: BoardState,\r\n    arr2: BoardState,\r\n    getCoordinate: (x: BoardValue) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(board, i),\r\n        getRow(board, i + 1),\r\n        (x: BoardValue) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(board, i),\r\n        getColumn(board, i + 1),\r\n        (x: BoardValue) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (board: BoardState): [BoardState, number] => {\r\n  let id = getNextId(board);\r\n  let score = 0;\r\n  let values: { [key: string]: BoardValue } = {};\r\n\r\n  board.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = parseInt(v.value) * 2;\r\n      values[key] = { ...v, id: id++, value: value.toString() as Value };\r\n      score += value;\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return [Object.values(values), score];\r\n};\r\n\r\nexport const moveRight = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(board, i), \"right\")).flat();\r\n};\r\n\r\nexport const moveLeft = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(board, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(board, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(board, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (\r\n  line: BoardState,\r\n  direction: Direction\r\n): BoardState => {\r\n  return shift(\r\n    line,\r\n    (v: BoardValue) => v.positionY,\r\n    (v: BoardValue, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (\r\n  line: BoardState,\r\n  direction: Direction\r\n): BoardState => {\r\n  return shift(\r\n    line,\r\n    (v: BoardValue) => v.positionX,\r\n    (v: BoardValue, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: BoardState,\r\n  getColumn: (v: BoardValue) => number,\r\n  setColumn: (v: BoardValue, position: number) => void,\r\n  direction: Direction\r\n): BoardState => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: BoardState = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== \"2048\") {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const addRandomValue = (board: BoardState): BoardState => {\r\n  const result = JSON.parse(JSON.stringify(board));\r\n\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(board, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n  const x = [\r\n    ...result,\r\n    {\r\n      id: getNextId(board),\r\n      value,\r\n      positionX: coordinates[0],\r\n      positionY: coordinates[1],\r\n    },\r\n  ];\r\n\r\n  return x;\r\n};\r\n\r\nconst isExists = (\r\n  board: BoardState,\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return board.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (board: BoardState, row: number): Array<BoardValue> =>\r\n  board.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (\r\n  board: BoardState,\r\n  column: number\r\n): Array<BoardValue> => board.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (boardState: BoardState): number => {\r\n  return getMaxId(boardState) + 1;\r\n};\r\n\r\nconst getMaxId = (boardState: BoardState): number => {\r\n  return Math.max.apply(\r\n    Math,\r\n    boardState.map((x) => x.id)\r\n  );\r\n};\r\n\r\nconst areBoardValuesEqual = (v1: BoardValue, v2: BoardValue): boolean => {\r\n  return (\r\n    (v1 === null && v2 === null) ||\r\n    ((v1 && Object.keys(v1)?.length) === (v2 && Object.keys(v2)?.length) &&\r\n      Object.keys(v1).every((p) => v1[p] === v2[p]))\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.scss\"\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button id={props.id} className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Value } from \"../interfaces/interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const Tile = (props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className=\"tileInner\">{props.value}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { isGameOver, merge } from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { BoardState } from \"../Game/Interfaces\";\r\nimport Tile from \"../Tile\";\r\n\r\nimport \"./Board.scss\";\r\n\r\nconst BoardContainer = (props: { children: React.ReactNode }) => {\r\n  return <div className=\"boardContainer\">{props.children}</div>;\r\n};\r\n\r\nconst GameOverContainer = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={handleRestart}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\ntype TransformFactor = 121 | 96.8;\r\n\r\nconst calcFactor = () => window.outerWidth <= 500 ? 96.8 : 121\r\n\r\nconst TilesList = (props: { values: BoardState }) => {\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {props.values.map((x) => (\r\n        <Tile\r\n          key={x.id}\r\n          value={x.value}\r\n          x={x.positionY * factor}\r\n          y={x.positionX * factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TileContainer = () => {\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  const values = boardState.sort((b1, b2) => b1.id - b2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList values={values} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Board = () => {\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  return (\r\n    <BoardContainer>\r\n      {isGameOver(merge(boardState)[0]) && <GameOverContainer />}\r\n      <BoardGrid />\r\n      <TileContainer />\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { GameContext } from \"../Game/Game\";\r\n\r\nimport \"./ScoresContainer.css\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n  showAddition?: boolean;\r\n}\r\n\r\nconst ScoreBox = (props: ScoreBoxProps) => {\r\n  useEffect(() => {}, [props.showAddition]);\r\n\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ScoresContainer = () => {\r\n  const { score, addScore } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (addScore === 0) {\r\n      return;\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"additionScore\";\r\n    div.classList.add(\"addScore\");\r\n    div.innerText = `+${addScore}`;\r\n\r\n    const currentScoreBox = document.getElementById(\"currentScoreBox\");\r\n    if (currentScoreBox.childElementCount === 2) {\r\n      currentScoreBox.replaceChild(div, currentScoreBox.lastChild);\r\n    }else {\r\n      currentScoreBox.appendChild(div);\r\n    }\r\n  }, [score, addScore]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div id=\"currentScoreBox\" style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={score} />\r\n        {/* <div id=\"additionScore\" className=\"addScore\">{`+${addScore}`}</div> */}\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={score} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst ShortDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"centeredText\">\r\n        <GameTitle />\r\n        <ShortDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button id=\"restartGameBtn\" onClick={(_) => handleRestart()}>\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport GameContainer from \"../GameContainer\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.css\";\r\nimport { BoardState, IGameContext } from \"./Interfaces\";\r\nimport {\r\n  addRandomValue,\r\n  areEqual,\r\n  merge,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n} from \"../../utils/gameUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\n\r\nexport const GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst MOVES = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n\r\nexport const Game = () => {\r\n  const [boardState, setBoardState] = useState<BoardState>([\r\n    ...boardInitialState,\r\n  ]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [addScore, setAddScore] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const move = MOVES[e.key];\r\n      if (!move) {\r\n        return;\r\n      }\r\n\r\n      const newBoardState: BoardState = move(boardState);\r\n      if (areEqual(boardState, newBoardState)) {\r\n        console.log(\"equal\");\r\n        return;\r\n      }\r\n\r\n      setBoardState(newBoardState);\r\n\r\n      setTimeout(() => {\r\n        const [mergedBoard, moveScore] = merge(newBoardState);\r\n\r\n        setBoardState(mergedBoard);\r\n        setScore(score + moveScore);\r\n        setAddScore(moveScore);\r\n\r\n        setTimeout(() => {\r\n          const board = addRandomValue(mergedBoard);\r\n          setBoardState(board);\r\n        }, 150);\r\n      }, 100);\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [boardState, score]);\r\n\r\n  const handleRestart = () => {\r\n    setBoardState([]);\r\n    setTimeout(() => {\r\n      setBoardState([...boardInitialState]);\r\n    }, 100);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        boardState,\r\n        score,\r\n        addScore,\r\n        handleRestart,\r\n      }}\r\n    >\r\n      <GameContainer>\r\n        <GameHeader />\r\n        <Board />\r\n      </GameContainer>\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst boardInitialState: BoardState = [\r\n  { id: 1, value: \"2\", positionX: 0, positionY: 0 },\r\n  { id: 2, value: \"4\", positionX: 0, positionY: 1 },\r\n  { id: 3, value: \"8\", positionX: 0, positionY: 2 },\r\n  { id: 4, value: \"16\", positionX: 0, positionY: 3 },\r\n  { id: 5, value: \"16\", positionX: 1, positionY: 0 },\r\n  { id: 6, value: \"8\", positionX: 1, positionY: 1 },\r\n  { id: 7, value: \"4\", positionX: 1, positionY: 2 },\r\n  { id: 8, value: \"2\", positionX: 1, positionY: 3 },\r\n  { id: 9, value: \"2\", positionX: 2, positionY: 0 },\r\n  { id: 10, value: \"4\", positionX: 2, positionY: 1 },\r\n  { id: 11, value: \"8\", positionX: 2, positionY: 2 },\r\n  { id: 12, value: \"16\", positionX: 2, positionY: 3 },\r\n  { id: 13, value: \"16\", positionX: 3, positionY: 0 },\r\n  { id: 14, value: \"8\", positionX: 3, positionY: 1 },\r\n  { id: 15, value: \"4\", positionX: 3, positionY: 2 },\r\n  { id: 16, value: \"16\", positionX: 3, positionY: 3 },\r\n];\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}