{"version":3,"sources":["components/GameContainer/GameContainer.tsx","constants/constants.ts","utils/gameUtils.ts","components/Button/Button.tsx","components/BoardTile/BoardTile.tsx","components/Board/Board.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameContainer","props","className","children","ScreenSizeBreakpoint","TilesScreenTransformFactor","INDICES","isGameOver","tiles","length","movePossible","arr1","arr2","getCoordinate","some","x","y","value","i","getRow","positionY","getColumn","positionX","merge","id","getNextId","score","values","forEach","v","key","parseInt","toString","Object","shiftHorizontally","line","direction","shift","position","shiftVertically","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","reverse","j","generateBoard","tilesCount","generateTile","getCoordinates","Math","floor","random","coordinates","isExists","row","filter","column","getMaxId","max","apply","map","areTilesEqual","t1","t2","keys","every","p","Button","onClick","BoardTile","style","transform","BoardContainer","GameOverContainer","handleRestart","useContext","GameContext","BoardGrid","grid","Array","from","rowId","columns","colId","calcFactor","window","innerWidth","TilesList","useState","factor","setFactor","useEffect","handleResize","addEventListener","removeEventListener","TileContainer","b1","b2","Board","ScoreBox","showAddition","title","ScoresContainer","addScore","div","document","createElement","classList","add","innerText","currentScoreBox","getElementById","childElementCount","replaceChild","lastChild","appendChild","GameTitle","ShortDescription","href","GameHeader","_","React","createContext","MOVES","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","Game","setTiles","setScore","setAddScore","handleKeyPress","e","preventDefault","move","newTiles","console","log","setTimeout","merged","moveScore","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d23bfe35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./GameContainer.scss\";\r\n\r\ninterface GameContainerProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const GameContainer = (props: GameContainerProps) => {\r\n  return <div className=\"container\">{props.children}</div>\r\n}","import { TransformFactor } from \"../components/Interfaces\"\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n}\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: {[key: string]: TransformFactor} = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121\r\n}","import { Value, Tile, Direction } from \"../components/Interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n  if (tiles.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): [Tile[], number] => {\r\n  let id = getNextId(tiles);\r\n  let score = 0;\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = parseInt(v.value) * 2;\r\n      values[key] = { ...v, id: id++, value: value.toString() as Value };\r\n      score += value;\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return [Object.values(values), score];\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== \"2048\") {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while(tilesCount > 0){\r\n    tiles = [...tiles, generateTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n}\r\n\r\nexport const generateTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nconst getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n\r\nconst areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.scss\"\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button id={props.id} className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Value } from \"../Interfaces\";\r\n\r\nimport \"./BoardTile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const BoardTile = (props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className=\"tileInner\">{props.value}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\r\nimport { isGameOver, merge } from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { Tile, TransformFactor } from \"../Interfaces\";\r\nimport BoardTile from \"../BoardTile\";\r\n\r\nimport \"./Board.scss\";\r\n\r\nconst BoardContainer = (props: { children: React.ReactNode }) => {\r\n  return <div className=\"boardContainer\">{props.children}</div>;\r\n};\r\n\r\nconst GameOverContainer = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={handleRestart}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if(window.innerWidth <= ScreenSizeBreakpoint.XS){\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if(window.innerWidth <= ScreenSizeBreakpoint.S){\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n}\r\n\r\nconst TilesList = (props: { values: Tile[] }) => {\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {props.values.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          x={x.positionY * factor}\r\n          y={x.positionX * factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TileContainer = () => {\r\n  const { tiles } = useContext(GameContext);\r\n\r\n  const values = tiles.sort((b1, b2) => b1.id - b2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList values={values} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Board = () => {\r\n  const { tiles } = useContext(GameContext);\r\n\r\n  return (\r\n    <BoardContainer>\r\n      {isGameOver(merge(tiles)[0]) && <GameOverContainer />}\r\n      <BoardGrid />\r\n      <TileContainer />\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { GameContext } from \"../Game/Game\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n  showAddition?: boolean;\r\n}\r\n\r\nconst ScoreBox = (props: ScoreBoxProps) => {\r\n  useEffect(() => {}, [props.showAddition]);\r\n\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ScoresContainer = () => {\r\n  const { score, addScore } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (addScore === 0) {\r\n      return;\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"additionScore\";\r\n    div.classList.add(\"addScore\");\r\n    div.innerText = `+${addScore}`;\r\n\r\n    const currentScoreBox = document.getElementById(\"currentScoreBox\");\r\n    if (currentScoreBox.childElementCount === 2) {\r\n      currentScoreBox.replaceChild(div, currentScoreBox.lastChild);\r\n    }else {\r\n      currentScoreBox.appendChild(div);\r\n    }\r\n  }, [score, addScore]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div id=\"currentScoreBox\" style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={score} />\r\n        {/* <div id=\"additionScore\" className=\"addScore\">{`+${addScore}`}</div> */}\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={score} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst ShortDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"centeredText\">\r\n        <GameTitle />\r\n        <ShortDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button id=\"restartGameBtn\" onClick={(_) => handleRestart()}>\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport GameContainer from \"../GameContainer\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  generateBoard,\r\n  generateTile,\r\n  merge,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n} from \"../../utils/gameUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport { IGameContext, Tile } from \"../Interfaces\";\r\n\r\nexport const GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst MOVES = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n\r\nexport const Game = () => {\r\n  const [tiles, setTiles] = useState<Tile[]>(generateBoard());\r\n  const [score, setScore] = useState<number>(0);\r\n  const [addScore, setAddScore] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const move = MOVES[e.key];\r\n      if (!move) {\r\n        return;\r\n      }\r\n\r\n      const newTiles: Tile[] = move(tiles);\r\n      if (areEqual(tiles, newTiles)) {\r\n        console.log(\"equal\");\r\n        return;\r\n      }\r\n\r\n      setTiles(newTiles);\r\n\r\n      setTimeout(() => {\r\n        const [merged, moveScore] = merge(newTiles);\r\n\r\n        setTiles(merged);\r\n        setScore(score + moveScore);\r\n        setAddScore(moveScore);\r\n\r\n        setTimeout(() => {\r\n          setTiles([...merged, generateTile(merged)]);\r\n        }, 150);\r\n      }, 100);\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [tiles, score]);\r\n\r\n  const handleRestart = () => {\r\n    setTiles([]);\r\n    setTimeout(() => {\r\n      setTiles(generateBoard());\r\n    }, 100);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        tiles: tiles,\r\n        score,\r\n        addScore,\r\n        handleRestart,\r\n      }}\r\n    >\r\n      <GameContainer>\r\n        <GameHeader />\r\n        <Board />\r\n      </GameContainer>\r\n    </GameContext.Provider>\r\n  );\r\n};","import React from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}