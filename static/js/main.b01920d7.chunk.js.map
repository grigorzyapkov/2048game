{"version":3,"sources":["utils/gameUtils.ts","constants/constants.ts","components/Tiles/Tile.tsx","components/Tiles/TilesList.tsx","components/Button/Button.tsx","components/Board/GameOver.tsx","components/Board/Board.tsx","components/ScoreBox/ScoreBox.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["INDICES","areTilesEqual","t1","t2","Object","keys","length","every","p","isGameOver","tiles","movePossible","arr1","arr2","getCoordinate","some","x","y","value","i","getRow","positionY","getColumn","positionX","shiftHorizontally","line","direction","shift","v","position","shiftVertically","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","reverse","j","generateBoard","tilesCount","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","id","getNextId","type","row","filter","column","getMaxId","max","apply","map","MOVES_MAP","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","ScreenSizeBreakpoint","TilesScreenTransformFactor","Tile","memo","props","className","style","transform","TilesList","factor","TileContainer","useState","calcFactor","setFactor","useEffect","handleResize","window","addEventListener","removeEventListener","sortedTiles","innerWidth","Button","onClick","children","GameOver","dispatch","useGameContext","_","Board","BoardGrid","grid","Array","from","rowId","columns","colId","BoardContainer","gameState","useReducer","boardReducer","initState","boardState","payload","moves","loading","setTimeout","state","action","lastMove","currGameState","nextGameState","slice","Error","ScoreBox","title","score","ScoresContainer","stateReducer","newPoints","oldAddScore","document","getElementById","innerText","newAddScore","cloneNode","parentNode","replaceChild","containsTile","tile","t","find","lastGeneratedTileId","reduce","acc","curr","parseInt","GameTitle","GameDescription","href","GameHeader","GameContext","React","createContext","gameReducer","move","b1","b2","values","forEach","key","toString","merge","GameProvider","handleKeyPress","e","preventDefault","includes","Provider","Game","context","useContext","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b01920d7.chunk.js","sourcesContent":["import { Value, Tile, Direction } from \"../components/Interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n  if (tiles.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): Tile[] => {\r\n  let id = getNextId(tiles);\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = parseInt(v.value) * 2;\r\n      values[key] = { ...v, id: id++, value: value.toString() as Value, type: \"merged\" };\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return Object.values(values);\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== \"2048\") {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while(tilesCount > 0){\r\n    tiles = [...tiles, createRandomTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n}\r\n\r\nexport const createRandomTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    type: \"new\",\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nexport const getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n\r\nexport const MOVES_MAP = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n","import { TransformFactor } from \"../components/Interfaces\"\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n}\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: {[key: string]: TransformFactor} = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121\r\n}","import React, { memo } from \"react\";\r\nimport { TileType, Value } from \"../Interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  type: TileType\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Tile = memo((props: TileProps) => {\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Tile;","import React, { useEffect, useState } from \"react\";\r\nimport { ScreenSizeBreakpoint, TilesScreenTransformFactor } from \"../../constants/constants\";\r\nimport { Tile, TransformFactor } from \"../Interfaces\";\r\nimport {default as BoardTile} from \"./Tile\";\r\n\r\nimport \"./TilesList.scss\";\r\n\r\nconst TilesList = (props: { tiles: Tile[], factor: number }) => {\r\n  return (\r\n    <div>\r\n      {props.tiles.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          type={x.type}\r\n          x={x.positionY * props.factor}\r\n          y={x.positionX * props.factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TileContainer = (props: { tiles: Tile[] }) => {\r\n\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const sortedTiles = props.tiles.sort((t1, t2) => t1.id - t2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList tiles={sortedTiles} factor={factor}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.XS) {\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.S) {\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n};","import React from \"react\";\r\n\r\nimport \"./Button.scss\"\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button id={props.id} className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\n\r\nconst GameOver = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={(_) => dispatch({ type: \"restart\" })}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOver;","import React, { useEffect, useReducer } from \"react\";\r\nimport { isGameOver, MOVES_MAP } from \"../../utils/gameUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { GameState, Tile } from \"../Interfaces\";\r\nimport Tiles from \"../Tiles\";\r\n\r\nimport \"./Board.scss\";\r\nimport GameOver from \"./GameOver\";\r\nimport { BoardActionType, BoardState } from \"./Interfaces\";\r\n\r\nconst Board = (props: { tiles: Tile[] }) => {\r\n  return (\r\n    <div className=\"boardContainer\">\r\n      {isGameOver(props.tiles) && <GameOver />}\r\n      <BoardGrid />\r\n      <Tiles tiles={props.tiles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nexport const BoardContainer = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [boardState, dispatch] = useReducer(boardReducer, initState());\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"addMove\", payload: gameState });\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (boardState.moves.length < 2 || boardState.loading) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: \"startMove\" });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"endMove\",\r\n      });\r\n    }, 100);\r\n\r\n    // TODO: Should clear timeouts\r\n  }, [boardState]);\r\n\r\n  return <Board tiles={boardState.tiles} />;\r\n};\r\n\r\nfunction boardReducer(state: BoardState, action: BoardActionType): BoardState {\r\n  switch (action.type) {\r\n    case \"addMove\": {\r\n      const isNewGame = !action.payload.lastMove;\r\n      if (isNewGame) {\r\n        return initState(action.payload.tiles, [action.payload]);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        moves: [...state.moves, action.payload],\r\n      };\r\n    }\r\n    case \"startMove\": {\r\n      const currGameState = state.moves[0];\r\n      const nextGameState = state.moves[1];\r\n      const tiles = MOVES_MAP[nextGameState.lastMove](currGameState.tiles);\r\n\r\n      return { ...state, loading: true, tiles };\r\n    }\r\n    case \"endMove\": {\r\n      const nextGameState = state.moves[1];\r\n      return {\r\n        moves: state.moves.slice(1),\r\n        loading: false,\r\n        tiles: nextGameState.tiles,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst initState = (tiles: Tile[] = [], moves: GameState[] = []): BoardState => {\r\n  return { moves, loading: false, tiles };\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./ScoreBox.scss\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\nexport const ScoreBox = (props: ScoreBoxProps) => {\r\n  return <div className=\"scoreBox\">\r\n    <span className=\"title\">{props.title}</span>\r\n    <span className=\"score\">{props.score}</span>\r\n  </div>\r\n}\r\n\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { getMaxId } from \"../../utils/gameUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { Tile } from \"../Interfaces\";\r\nimport ScoreBox from \"../ScoreBox\";\r\nimport { ACTIONTYPE, ScoresState } from \"./Interfaces\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\nexport const ScoresContainer = () => {\r\n  const { gameState } = useGameContext();\r\n  const [state, dispatch] = useReducer(stateReducer, initState(gameState.tiles));\r\n\r\n  \r\n  useEffect(() => {\r\n    dispatch({ type: \"change\", payload: gameState.tiles });\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (state.newPoints > 0) {\r\n      const oldAddScore = document.getElementById(\"additionScore\");\r\n      oldAddScore.innerText = `+${state.newPoints}`;\r\n      const newAddScore = oldAddScore.cloneNode(true);\r\n      oldAddScore.parentNode.replaceChild(newAddScore, oldAddScore);\r\n    }\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={state.score} />\r\n        <div className=\"addScore\" id=\"additionScore\"></div>\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={state.score} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initState = (tiles: Tile[]): ScoresState => {\r\n  return {\r\n    score: 0,\r\n    newPoints: 0,\r\n    tiles,\r\n  };\r\n};\r\n\r\nconst containsTile = (tiles: Tile[], tile: Tile): boolean => {\r\n  return tiles.some((t) => t.id === tile.id);\r\n};\r\n\r\nconst stateReducer = (state: ScoresState, action: ACTIONTYPE) => {\r\n  switch (action.type) {\r\n    case \"change\": {\r\n      const tiles = action.payload;\r\n\r\n      // handles restart\r\n      if (\r\n        tiles.length === 2 &&\r\n        [1, 2].every((id) => tiles.find((tile) => tile.id === id)) &&\r\n        !state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return initState(tiles);\r\n      }\r\n\r\n      // handles add new tile\r\n      if (\r\n        state.tiles.every((t) => containsTile(tiles, t)) &&\r\n        tiles.length === state.tiles.length + 1\r\n      ) {\r\n        return { ...state, tiles: tiles, newPoints: 0 };\r\n      }\r\n\r\n      // handles merge\r\n      const lastGeneratedTileId = getMaxId(tiles);\r\n      const newPoints = tiles.reduce((acc: number, curr: Tile) => {\r\n        const add =\r\n          curr.id === lastGeneratedTileId || containsTile(state.tiles, curr)\r\n            ? 0\r\n            : parseInt(curr.value);\r\n        return acc + add;\r\n      }, 0);\r\n\r\n      return {\r\n        tiles: tiles,\r\n        newPoints,\r\n        score: state.score + newPoints,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst GameDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"centeredText\">\r\n        <GameTitle />\r\n        <GameDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button\r\n          id=\"restartGameBtn\"\r\n          onClick={(_) => dispatch({ type: \"restart\" })}\r\n        >\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useReducer } from \"react\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  createRandomTile,\r\n  generateBoard,\r\n  merge,\r\n  MOVES_MAP,\r\n} from \"../../utils/gameUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport {\r\n  GameContextActionType,\r\n  GameState,\r\n  IGameContext,\r\n  MoveKeyCode,\r\n  Tile,\r\n} from \"../Interfaces\";\r\n\r\nconst GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst initState = (tilesCount = 2): GameState => {\r\n  return {\r\n    tiles: generateBoard(tilesCount),\r\n    lastMove: null,\r\n  };\r\n};\r\n\r\nfunction gameReducer(state: GameState, action: GameContextActionType) {\r\n  switch (action.type) {\r\n    case \"restart\": {\r\n      return initState();\r\n    }\r\n    case \"move\": {\r\n      const move = MOVES_MAP[action.payload];\r\n      let tiles: Tile[] = move(state.tiles);\r\n      if (areEqual(state.tiles, tiles)) {\r\n        return state;\r\n      }\r\n\r\n      tiles = merge(tiles);\r\n      return {\r\n        tiles: [...tiles, createRandomTile(tiles)],\r\n        lastMove: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst GameProvider = (props) => {\r\n  const [state, dispatch] = useReducer(gameReducer, initState());\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowRight\", \"ArrowLeft\"].includes(e.key)) {\r\n        dispatch({ type: \"move\", payload: e.key as MoveKeyCode });\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState: state, dispatch }}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst Game = () => {\r\n  return (\r\n    <GameProvider>\r\n      <div className=\"gameContainer\">\r\n        <GameHeader />\r\n        <Board />\r\n      </div>\r\n    </GameProvider>\r\n  );\r\n};\r\n\r\nfunction useGameContext() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useGameContext must be used within a GameContextProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { Game, useGameContext };\r\n","import React from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}