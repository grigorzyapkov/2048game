{"version":3,"sources":["components/GameContainer/GameContainer.tsx","components/ScoresContainer/ScoresContainer.tsx","utils/gameUtils.ts","components/Button/Button.tsx","components/Tile/Tile.tsx","components/Board/Board.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameContainer","props","className","children","ScoreBox","useEffect","showAddition","title","score","ScoresContainer","useContext","GameContext","addScore","div","document","createElement","id","classList","add","innerText","currentScoreBox","getElementById","childElementCount","replaceChild","lastChild","appendChild","style","position","INDICES","isGameOver","board","length","movePossible","arr1","arr2","getCoordinate","some","x","y","value","i","getRow","positionY","getColumn","positionX","merge","getNextId","values","forEach","v","key","parseInt","toString","Object","shiftHorizontally","line","direction","shift","shiftVertically","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","reverse","j","isExists","addRandomValue","start","Date","now","getCoordinates","Math","floor","random","coordinates","console","log","row","filter","column","boardState","getMaxId","max","apply","map","areBoardValuesEqual","keys","every","p","Button","onClick","Tile","translateX","translateY","transform","BoardContainer","GameOverLayer","handleRestart","BoardGrid","grid","Array","from","rowId","columns","colId","TilesList","TileContainer","b1","b2","Board","GameTitle","ShortDescription","href","GameHeader","_","React","createContext","MOVES","ArrowUp","flat","ArrowDown","ArrowRight","ArrowLeft","Game","useState","boardInitialState","setBoardState","setScore","setAddScore","handleKeyPress","e","preventDefault","move","newBoardState","requestAnimationFrame","mergedBoard","moveScore","setTimeout","addEventListener","removeEventListener","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.049f1da7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./GameContainer.css\";\r\n\r\ninterface GameContainerProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const GameContainer = (props: GameContainerProps) => {\r\n  return <div className=\"container\">{props.children}</div>\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { GameContext } from \"../Game/Game\";\r\n\r\nimport \"./ScoresContainer.css\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n  showAddition?: boolean;\r\n}\r\n\r\nconst ScoreBox = (props: ScoreBoxProps) => {\r\n  useEffect(() => {}, [props.showAddition]);\r\n\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ScoresContainer = () => {\r\n  const { score, addScore } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    if (addScore === 0) {\r\n      return;\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.id = \"additionScore\";\r\n    div.classList.add(\"addScore\");\r\n    div.innerText = `+${addScore}`;\r\n\r\n    const currentScoreBox = document.getElementById(\"currentScoreBox\");\r\n    if (currentScoreBox.childElementCount === 2) {\r\n      currentScoreBox.replaceChild(div, currentScoreBox.lastChild);\r\n    }else {\r\n      currentScoreBox.appendChild(div);\r\n    }\r\n  }, [score, addScore]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div id=\"currentScoreBox\" style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={score} />\r\n        {/* <div id=\"additionScore\" className=\"addScore\">{`+${addScore}`}</div> */}\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={score} />\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  BoardState,\r\n  BoardValue,\r\n  Direction,\r\n} from \"../components/Game/Interfaces\";\r\nimport { Value } from \"../components/interfaces/interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: BoardState, b2: BoardState) => {\r\n  return b1.every((x) => b2.some((y) => areBoardValuesEqual(x, y)));\r\n};\r\n\r\nexport const isGameOver = (board: BoardState) => {\r\n  if (board.length < 16) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: BoardState,\r\n    arr2: BoardState,\r\n    getCoordinate: (x: BoardValue) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(board, i),\r\n        getRow(board, i + 1),\r\n        (x: BoardValue) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(board, i),\r\n        getColumn(board, i + 1),\r\n        (x: BoardValue) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (board: BoardState): [BoardState, number] => {\r\n  let id = getNextId(board);\r\n  let score = 0;\r\n  let values: { [key: string]: BoardValue } = {};\r\n\r\n  board.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = parseInt(v.value) * 2;\r\n      values[key] = { ...v, id: id++, value: value.toString() as Value };\r\n      score += value;\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return [Object.values(values), score];\r\n};\r\n\r\nexport const moveRight = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(board, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(board, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(board, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (board: BoardState): BoardState => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(board, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (\r\n  line: BoardState,\r\n  direction: Direction\r\n): BoardState => {\r\n  return shift(\r\n    line,\r\n    (v: BoardValue) => v.positionY,\r\n    (v: BoardValue, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (\r\n  line: BoardState,\r\n  direction: Direction\r\n): BoardState => {\r\n  return shift(\r\n    line,\r\n    (v: BoardValue) => v.positionX,\r\n    (v: BoardValue, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: BoardState,\r\n  getColumn: (v: BoardValue) => number,\r\n  setColumn: (v: BoardValue, position: number) => void,\r\n  direction: Direction\r\n): BoardState => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: BoardState = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== \"2048\") {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const isExists = (\r\n  board: BoardState,\r\n  positionX: number,\r\n  positionY: number\r\n) => {\r\n  return board.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const addRandomValue = (board: BoardState): BoardState => {\r\n  const start = Date.now();\r\n  const result = JSON.parse(JSON.stringify(board));\r\n\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(board, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? \"4\" : \"2\";\r\n  const x = [\r\n    ...result,\r\n    {\r\n      id: getNextId(board),\r\n      value,\r\n      positionX: coordinates[0],\r\n      positionY: coordinates[1],\r\n    },\r\n  ];\r\n\r\n  console.log(\"addRandomNumber - \" + (Date.now() - start));\r\n\r\n  return x;\r\n};\r\n\r\nexport const getRow = (board: BoardState, row: number): Array<BoardValue> =>\r\n  board.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (\r\n  board: BoardState,\r\n  column: number\r\n): Array<BoardValue> => board.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (boardState: BoardState): number => {\r\n  return getMaxId(boardState) + 1;\r\n};\r\n\r\nconst getMaxId = (boardState: BoardState): number => {\r\n  return Math.max.apply(\r\n    Math,\r\n    boardState.map((x) => x.id)\r\n  );\r\n};\r\n\r\nconst areBoardValuesEqual = (v1: BoardValue, v2: BoardValue): boolean => {\r\n  return (\r\n    (v1 === null && v2 === null) ||\r\n    ((v1 && Object.keys(v1)?.length) === (v2 && Object.keys(v2)?.length) &&\r\n      Object.keys(v1).every((p) => v1[p] === v2[p]))\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.css\"\r\n\r\ninterface ButtonProps {\r\n  children: React.ReactNode;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  return (\r\n    <button className=\"appButton\" onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Value } from \"../interfaces/interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport const Tile = (props: TileProps) => {\r\n  const translateX = 121 * props.x;\r\n  const translateY = 121 * props.y;\r\n\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${translateX}px, ${translateY}px)` }}\r\n    >\r\n      <div className=\"tileInner\">{props.value}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { isGameOver, merge } from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\nimport { GameContext } from \"../Game/Game\";\r\nimport { BoardState, BoardValue } from \"../Game/Interfaces\";\r\nimport Tile from \"../Tile\";\r\n\r\nimport \"./Board.scss\";\r\n\r\nconst BoardContainer = (props: { children: React.ReactNode }) => {\r\n  return <div className=\"boardContainer\">{props.children}</div>;\r\n};\r\n\r\nconst GameOverLayer = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"gameOverContainer\" className=\"gameOverContainer\">\r\n      <p>Game Over!</p>\r\n      <Button onClick={handleRestart}>Try again</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst TilesList = (props: { values: BoardState }) => {\r\n  return (\r\n    <>\r\n      {props.values.map((x) => (\r\n        <Tile key={x.id} value={x.value} x={x.positionY} y={x.positionX} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst TileContainer = () => {\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  const values = boardState.sort((b1, b2) => b1.id - b2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList values={values} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Board = () => {\r\n  const { boardState } = useContext(GameContext);\r\n\r\n  return (\r\n    <BoardContainer>\r\n      {isGameOver(merge(boardState)[0]) && <GameOverLayer />}\r\n      <BoardGrid />\r\n      <TileContainer />\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport GameContainer from \"../GameContainer\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.css\";\r\nimport { BoardState, IGameContext } from \"./Interfaces\";\r\nimport {\r\n  addRandomValue,\r\n  areEqual,\r\n  merge,\r\n  moveDown,\r\n  moveLeft,\r\n  moveRight,\r\n  moveUp,\r\n} from \"../../utils/gameUtils\";\r\nimport Button from \"../Button\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst ShortDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>Join the tiles, get to 2048!</span>\r\n      <br />\r\n      <a href=\"#id\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameHeader = () => {\r\n  const { handleRestart } = useContext(GameContext);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"flex\">\r\n        <GameTitle />\r\n        <ScoresContainer />\r\n      </div>\r\n      <div className=\"flexWithSpaceBetween\">\r\n        <ShortDescription />\r\n        <Button onClick={(_) => handleRestart()}>New Game</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst MOVES = {\r\n  ArrowUp: moveUp,\r\n  ArrowDown: moveDown,\r\n  ArrowRight: moveRight,\r\n  ArrowLeft: moveLeft,\r\n};\r\n\r\nexport const Game = () => {\r\n  const [boardState, setBoardState] = useState<BoardState>([\r\n    ...boardInitialState,\r\n  ]);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [addScore, setAddScore] = useState<number>(0);\r\n\r\n  const handleGenerate = () => {\r\n    setBoardState(addRandomValue(boardState));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const move = MOVES[e.key];\r\n      if (!move) {\r\n        return;\r\n      }\r\n\r\n      const newBoardState: BoardState = move(boardState);\r\n      if (areEqual(boardState, newBoardState)) {\r\n        console.log(\"equal\");\r\n        return;\r\n      }\r\n\r\n      setBoardState(newBoardState);\r\n\r\n      requestAnimationFrame(() => {\r\n        const [mergedBoard, moveScore] = merge(newBoardState);\r\n        setBoardState(mergedBoard);\r\n        setScore(score + moveScore);\r\n        setAddScore(moveScore);\r\n\r\n        setTimeout(() => {\r\n          const board = addRandomValue(mergedBoard);\r\n          setBoardState(board);\r\n        }, 50);\r\n      });\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [boardState, score]);\r\n\r\n  const handleRestart = () => {\r\n    setBoardState([]);\r\n    setTimeout(() => {\r\n      setBoardState([...boardInitialState]);\r\n    }, 100);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        boardState,\r\n        score,\r\n        addScore,\r\n        handleRestart,\r\n      }}\r\n    >\r\n      <GameContainer>\r\n        <GameHeader />\r\n        <Button onClick={handleGenerate}>Generate Tile</Button>\r\n        <Board />\r\n      </GameContainer>\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst boardInitialState: BoardState = [\r\n  { id: 1, value: \"2\", positionX: 1, positionY: 0 },\r\n  { id: 2, value: \"2\", positionX: 1, positionY: 1 },\r\n  { id: 3, value: \"2\", positionX: 1, positionY: 2 },\r\n  { id: 4, value: \"2\", positionX: 2, positionY: 1 },\r\n];\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header></header>\n      <main>\n        <Game />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}